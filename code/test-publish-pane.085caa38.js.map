{"version":3,"file":"test-publish-pane.085caa38.js","sources":["../../src/script/utils/android-validation.ts","../../src/script/services/publish/android-publish.ts","../../src/script/utils/ios-validation.ts","../../src/script/services/publish/ios-publish.ts","../../src/script/utils/oculus-validation.ts","../../src/script/services/publish/oculus-publish.ts","../../src/script/utils/win-validation.ts","../../src/script/services/publish/windows-publish.ts","../../src/script/services/publish/index.ts","../../src/script/components/hover-tooltip.ts","../../src/script/components/info-circle-tooltip.ts","../../src/script/components/app-package-form-base.ts","../../src/script/components/windows-form.ts","../../src/script/components/android-form.ts","../../src/script/components/ios-form.ts","../../src/script/components/oculus-form.ts","../../src/script/components/publish-pane.ts","../../src/script/components/test-publish-pane.ts"],"sourcesContent":["import { PackageOptions, ShareTarget, ShortcutItem } from './interfaces';\r\n\r\n/**\r\n * Settings for the Android APK generation. This is the raw data passed to the CloudApk service.\r\n * It should match the CloudApk service's AndroidPackageOptions interface: https://github.com/pwa-builder/CloudAPK/blob/master/build/androidPackageOptions.ts\r\n */\r\nexport interface AndroidPackageOptions  extends PackageOptions {\r\n  appVersion: string;\r\n  appVersionCode: number;\r\n  backgroundColor: string;\r\n  display: 'standalone' | 'fullscreen' | 'fullscreen-sticky';\r\n  enableNotifications: boolean;\r\n  enableSiteSettingsShortcut: boolean;\r\n  fallbackType: 'customtabs' | 'webview';\r\n  features: {\r\n    appsFlyer?: {\r\n      enabled: boolean;\r\n      appsFlyerId: string;\r\n    };\r\n    locationDelegation?: {\r\n      enabled: boolean;\r\n    };\r\n    playBilling?: {\r\n      enabled: boolean;\r\n    };\r\n    firstRunFlag?: {\r\n      enabled: boolean;\r\n      queryParameterName: string;\r\n    };\r\n  };\r\n  host: string;\r\n  iconUrl: string;\r\n  includeSourceCode: boolean;\r\n  isChromeOSOnly: boolean;\r\n  launcherName: string;\r\n  maskableIconUrl: string | null;\r\n  monochromeIconUrl: string | null;\r\n  name: string;\r\n  navigationColor: string;\r\n  navigationColorDark: string;\r\n  navigationDividerColor: string;\r\n  navigationDividerColorDark: string;\r\n  orientation:\r\n  | 'default'\r\n  | 'any'\r\n  | 'natural'\r\n  | 'landscape'\r\n  | 'portrait'\r\n  | 'portrait-primary'\r\n  | 'portrait-secondary'\r\n  | 'landscape-primary'\r\n  | 'landscape-secondary';\r\n  packageId: string;\r\n  pwaUrl: string;\r\n  shareTarget?: ShareTarget;\r\n  shortcuts: ShortcutItem[];\r\n  signing: AndroidSigningOptions;\r\n  signingMode: 'new' | 'none' | 'mine';\r\n  splashScreenFadeOutDuration: number;\r\n  startUrl: string;\r\n  themeColor: string;\r\n  webManifestUrl: string;\r\n}\r\n\r\n/**\r\n * Signing options for Android APK generation. This is sent to the Cloud APK service as part of AndroidApkOptions.\r\n * It should generally match the CloudApk service's SigningOptions interface: https://github.com/pwa-builder/CloudAPK/blob/master/build/signingOptions.ts\r\n */\r\nexport interface AndroidSigningOptions {\r\n  /**\r\n   * The base64 encoded contents of the Android .keystore file.\r\n   * This can be null when signing mode is \"none\" or \"new\".\r\n   */\r\n  file: string | null;\r\n  alias: string;\r\n  fullName: string;\r\n  organization: string;\r\n  organizationalUnit: string;\r\n  countryCode: string;\r\n  keyPassword: string;\r\n  storePassword: string;\r\n}\r\n\r\ntype AndroidPackageValidationError = {\r\n  field: keyof AndroidPackageOptions | keyof AndroidSigningOptions | null;\r\n  error: string;\r\n};\r\n\r\nconst DISALLOWED_ANDROID_PACKAGE_CHARS_REGEX = /[^a-zA-Z0-9_]/g;\r\n\r\nexport const maxSigningKeySizeInBytes = 2097152;\r\n\r\nexport function generatePackageId(host: string): string {\r\n  const parts = host\r\n    .split('.')\r\n    .reverse()\r\n    .map(p => p.trim().toLowerCase())\r\n    .map(p => withoutLeadingDigits(p)) // Android Package name parts can't begin with numbers: https://github.com/pwa-builder/PWABuilder/issues/1336#issuecomment-755029058\r\n    .filter(p => p.length > 0)\r\n    .map(p => p.replace(DISALLOWED_ANDROID_PACKAGE_CHARS_REGEX, '_'));\r\n  parts.push('twa');\r\n\r\n  return parts.join('.');\r\n}\r\n\r\nexport function validateAndroidPackageId(packageId?: string | null): AndroidPackageValidationError[] {\r\n  const packageErrors: AndroidPackageValidationError[] = [];\r\n  if (!packageId) {\r\n    packageErrors.push({ field: 'packageId', error: 'No package ID' });\r\n  }\r\n\r\n  if (packageId && packageId.search(/[^a-zA-Z0-9-_.]/) !== -1) {\r\n    packageErrors.push({\r\n      field: 'packageId',\r\n      error:\r\n        'Package ID must not contain any character other than alphanumeric, period, hyphen, and underscore.',\r\n    });\r\n  }\r\n\r\n  // Package ID can't contain \".if.\", can't start with \"if.\", and can't end with \".if\"\r\n  // See https://github.com/pwa-builder/PWABuilder/issues/2146\r\n  if (packageId && (packageId.includes('.if.') || packageId.startsWith('if.') || packageId?.endsWith('.if'))) {\r\n    packageErrors.push({\r\n      field: 'packageId',\r\n      error: 'Package ID must not contain \".if.\", must not start with \"if.\", and must not end with \".if\"'\r\n    });\r\n  }\r\n\r\n  return packageErrors;\r\n}\r\n\r\nexport function validateAndroidOptions(\r\n  options: Partial<AndroidPackageOptions | null>\r\n): AndroidPackageValidationError[] {\r\n  const validationErrors: AndroidPackageValidationError[] = [];\r\n  if (!options) {\r\n    validationErrors.push({ field: null, error: 'No options specified ' });\r\n    return validationErrors;\r\n  }\r\n\r\n  validationErrors.push(...validateAndroidPackageId(options?.packageId));\r\n\r\n  if (!options.name || options.name.trim().length === 0) {\r\n    validationErrors.push({\r\n      field: 'name',\r\n      error: 'Must have a valid app name',\r\n    });\r\n  }\r\n\r\n  if (options.name && (options.name.length < 3 || options.name.length > 50)) {\r\n    validationErrors.push({\r\n      field: 'name',\r\n      error: 'Name must be between 3 and 50 characters in length'\r\n    });\r\n  }\r\n\r\n  if (options.launcherName && (options.launcherName.length < 3 || options.launcherName.length > 30)) {\r\n    validationErrors.push({\r\n      field: 'launcherName',\r\n      error: 'Launcher name must be between 3 and 30 characters in length'\r\n    });\r\n  }\r\n\r\n  if (!options.appVersion || options.appVersion.trim().length === 0) {\r\n    validationErrors.push({\r\n      field: 'appVersion',\r\n      error: 'Must have a valid app version',\r\n    });\r\n  }\r\n\r\n  if (!options.appVersionCode || options.appVersionCode > 2100000000) {\r\n    validationErrors.push({\r\n      field: 'appVersionCode',\r\n      error: 'App version code must be between 1 and 2,100,000,000',\r\n    });\r\n  }\r\n\r\n  if (!options.backgroundColor) {\r\n    validationErrors.push({\r\n      field: 'backgroundColor',\r\n      error: 'Must have a background color',\r\n    });\r\n  }\r\n\r\n  if (\r\n    options.display !== 'standalone' &&\r\n    options.display !== 'fullscreen' &&\r\n    options.display !== 'fullscreen-sticky'\r\n  ) {\r\n    validationErrors.push({\r\n      field: 'display',\r\n      error: \"Display must be 'standalone' or 'fullscreen'\",\r\n    });\r\n  }\r\n\r\n  if (\r\n    options.fallbackType !== 'customtabs' &&\r\n    options.fallbackType !== 'webview'\r\n  ) {\r\n    validationErrors.push({\r\n      field: 'fallbackType',\r\n      error: \"Fallback type must be 'customtabs' or 'webview'\",\r\n    });\r\n  }\r\n\r\n  if (!options.host) {\r\n    validationErrors.push({ field: 'host', error: 'Host must be specified' });\r\n  } else {\r\n    const hostWithProtocol = options.host.startsWith(\"https\") ? options.host : `https://${options.host}`;\r\n    const hostUrlError = validateUrl(hostWithProtocol);\r\n    if (hostUrlError) {\r\n      validationErrors.push({\r\n        field: 'host',\r\n        error: 'Host URL must be a valid URL',\r\n      });\r\n    }\r\n  }\r\n\r\n  if (!options.iconUrl) {\r\n    validationErrors.push({ field: 'iconUrl', error: 'Must have a icon URL' });\r\n  } else {\r\n    const iconUrlError = validateUrl(options.iconUrl, options.webManifestUrl);\r\n    if (iconUrlError) {\r\n      validationErrors.push({ field: 'iconUrl', error: 'Icon URL is invalid' });\r\n    }\r\n  }\r\n\r\n  if (!options.launcherName || options.launcherName.trim().length === 0) {\r\n    validationErrors.push({\r\n      field: 'launcherName',\r\n      error: 'Must have an app launcher name',\r\n    });\r\n  }\r\n\r\n  if (!options.webManifestUrl) {\r\n    validationErrors.push({\r\n      field: 'webManifestUrl',\r\n      error: 'Must have a manifest URL',\r\n    });\r\n  } else {\r\n    const manifestUrlError = validateUrl(options.webManifestUrl);\r\n    if (manifestUrlError) {\r\n      validationErrors.push({\r\n        field: 'webManifestUrl',\r\n        error: 'Manifest URL is invalid',\r\n      });\r\n    }\r\n  }\r\n\r\n  // Maskable icon is optional. But if it's specified, it must be a valid URL.\r\n  if (options.maskableIconUrl) {\r\n    const maskableIconError = validateUrl(\r\n      options.maskableIconUrl,\r\n      options.webManifestUrl\r\n    );\r\n    if (maskableIconError) {\r\n      validationErrors.push({\r\n        field: 'maskableIconUrl',\r\n        error:\r\n          'Maskable icon URL was invalid. If you specify a maskable icon URL, it must be a valid URL.',\r\n      });\r\n    }\r\n  }\r\n\r\n  // monochrome icon is also optional.\r\n  if (options.monochromeIconUrl) {\r\n    const monochromeIconError = validateUrl(\r\n      options.monochromeIconUrl,\r\n      options.webManifestUrl\r\n    );\r\n    if (monochromeIconError) {\r\n      validationErrors.push({\r\n        field: 'monochromeIconUrl',\r\n        error:\r\n          'Monochrome icon URL was invalid. If you specify a monochrome icon URL, it must be a valid URL.',\r\n      });\r\n    }\r\n  }\r\n\r\n  if (!options.navigationColor) {\r\n    validationErrors.push({\r\n      field: 'navigationColor',\r\n      error: 'Navigation color is required',\r\n    });\r\n  }\r\n\r\n  // Validating signing options when we have a signing mode\r\n  if (options.signingMode === 'mine' || options.signingMode === 'new') {\r\n    if (!options.signing) {\r\n      validationErrors.push({\r\n        field: 'signing',\r\n        error: 'Signing information must be supplied.',\r\n      });\r\n    } else {\r\n      // Full name, organization, organizational unit, and country are required if signingMode !== mine\r\n      // File is required only signingMode === \"mine\"\r\n      // Store password and key password are required only if signingMode === \"mine\"; otherwise, they're optional and CloudAPK will generate a new password for you.\r\n      const requiredSigningFields: Array<keyof AndroidSigningOptions> = [\r\n        'alias',\r\n      ];\r\n      if (options.signingMode === 'mine') {\r\n        requiredSigningFields.push('file', 'keyPassword', 'storePassword');\r\n      } else if (options.signingMode === 'new') {\r\n        // New key? We require these details to create the key.\r\n        requiredSigningFields.push(\r\n          'fullName',\r\n          'organization',\r\n          'organizationalUnit',\r\n          'countryCode'\r\n        );\r\n      }\r\n\r\n      requiredSigningFields\r\n        .filter(prop => !options.signing![prop])\r\n        .forEach(prop =>\r\n          validationErrors.push({\r\n            field: prop,\r\n            error: `${prop.toString()} must be specified`,\r\n          })\r\n        );\r\n\r\n      // If key password and store password are specified, they must be >= 6 chars in length.\r\n      if (\r\n        options.signing.keyPassword &&\r\n        options.signing.keyPassword.length < 6\r\n      ) {\r\n        validationErrors.push({\r\n          field: 'keyPassword',\r\n          error: 'Key password must be at least 6 characters',\r\n        });\r\n      }\r\n      if (\r\n        options.signing.storePassword &&\r\n        options.signing.storePassword.length < 6\r\n      ) {\r\n        validationErrors.push({\r\n          field: 'storePassword',\r\n          error: 'Key store password must be at least 6 characters',\r\n        });\r\n      }\r\n\r\n      // Ensure country code is 2 chars\r\n      if (\r\n        options.signingMode === 'new' &&\r\n        options.signing.countryCode &&\r\n        options.signing.countryCode.length !== 2\r\n      ) {\r\n        validationErrors.push({\r\n          field: 'countryCode',\r\n          error: 'Signing key country code must be 2 letters',\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  if (\r\n    options.splashScreenFadeOutDuration === null ||\r\n    options.splashScreenFadeOutDuration === undefined ||\r\n    options.splashScreenFadeOutDuration < 0\r\n  ) {\r\n    validationErrors.push({\r\n      field: 'splashScreenFadeOutDuration',\r\n      error: 'Splash screen fade duration must be 0 or greater',\r\n    });\r\n  }\r\n\r\n  if (!options.startUrl) {\r\n    validationErrors.push({\r\n      field: 'startUrl',\r\n      error:\r\n        \"Start URL must be specified. If your start URL is the same as Host, you can use '/' as the start URL.\",\r\n    });\r\n  } else {\r\n    const startUrlError = validateUrl(options.startUrl, options.webManifestUrl);\r\n    if (startUrlError) {\r\n      validationErrors.push({\r\n        field: 'startUrl',\r\n        error: 'Start URL is invalid',\r\n      });\r\n    }\r\n  }\r\n\r\n  if (!options.themeColor) {\r\n    validationErrors.push({\r\n      field: 'themeColor',\r\n      error: 'Theme color must be specified',\r\n    });\r\n  }\r\n\r\n  return validationErrors;\r\n}\r\n\r\nexport function validateUrl(url: string, base?: string): string | null {\r\n  try {\r\n    new URL(url, base);\r\n    return null;\r\n  } catch (urlError) {\r\n    return `${urlError}`;\r\n  }\r\n}\r\n\r\nfunction withoutLeadingDigits(input: string): string {\r\n  if (input.length === 0) {\r\n    return 'app';\r\n  }\r\n\r\n  // Check if it starts with a digit.\r\n  // If so, prepend \"app\" to it.\r\n  if (input && input.length && input[0]!.match(/^\\d/)) {\r\n    return `app_${input}`;\r\n  }\r\n\r\n  return input;\r\n}\r\n","import {\n  validateAndroidOptions,\n  AndroidPackageOptions,\n  generatePackageId\n} from '../../utils/android-validation';\nimport { env } from '../../utils/environment';\nimport { findSuitableIcon, findBestAppIcon } from '../../utils/icons';\nimport { ManifestContext } from '../../utils/interfaces';\n\nexport let hasGeneratedAndroidPackage = false;\n\nexport async function generateAndroidPackage(androidOptions: AndroidPackageOptions): Promise<Blob | undefined> {\n  const validationErrors = validateAndroidOptions(androidOptions);\n  if (validationErrors.length > 0 || !androidOptions) {\n    throw new Error(\n      'Invalid Android options. ' + validationErrors.map(a => a.error).join('\\n')\n    );\n  }\n\n  const generateAppUrl = `${env.androidPackageGeneratorUrl}/generateAppPackage`;\n  const response = await fetch(generateAppUrl, {\n    method: 'POST',\n    body: JSON.stringify(androidOptions),\n    headers: new Headers({ 'content-type': 'application/json' }),\n  });\n\n  if (response.status === 200) {\n    hasGeneratedAndroidPackage = true;\n    return await response.blob();\n  } else {\n    const responseText = await response.text();\n\n    // Did it fail because images couldn't be fetched with ECONNREFUSED? E.g. https://github.com/pwa-builder/PWABuilder/issues/1312\n    // This may indicate either the service is using HTTP/2 or HTTP/3, which Bubblewrap doesn't currently support.\n    // Or, it may indicate the site is using anti-bot tech, such as Cloudflare.\n    //\n    // If it's the former (HTTP/2 or HTTP/3), see if we can fetch using our safe URL proxy, which properly handles HTTP/2 and /3.\n    const hasSafeImages =\n      androidOptions.iconUrl &&\n      androidOptions.iconUrl.includes(env.safeUrlFetcher || '');\n    const isConnectionRefusedOrForbidden =\n      (responseText || '').includes('ECONNREFUSED') || response.status === 403;\n\n    if (!hasSafeImages && isConnectionRefusedOrForbidden) {\n      console.warn(\n        'Android package generation failed with ECONNREFUSED. Retrying with safe images.',\n        responseText\n      );\n      const updatedOptions = updateAndroidOptionsWithSafeUrls(androidOptions);\n      await generateAndroidPackage(updatedOptions);\n    } else {\n      let err = new Error(\n        `Error generating Android package.\\nStatus code: ${response.status}\\nError: ${response.statusText}\\nDetails: ${responseText}`\n      );\n      Object.defineProperty(response, \"stack_trace\", {value: responseText});\n      //@ts-ignore\n      err.response = response;\n      throw err;\n    }\n  }\n\n  return undefined;\n}\n\nexport function emptyAndroidPackageOptions(): AndroidPackageOptions {\n  return {\n    appVersion: '1.0.0.0',\n    appVersionCode: 1,\n    backgroundColor: '#ffffff',\n    display: 'standalone',\n    enableNotifications: false,\n    enableSiteSettingsShortcut: true,\n    fallbackType: 'customtabs',\n    features: {\n      locationDelegation: {\n        enabled: true\n      },\n      playBilling: {\n        enabled: false\n      }\n    },\n    host: '',\n    iconUrl: '',\n    includeSourceCode: false,\n    isChromeOSOnly: false,\n    launcherName: '',\n    maskableIconUrl: '',\n    monochromeIconUrl: '',\n    name: '',\n    navigationColor: '#ffffff',\n    navigationColorDark: '#000000',\n    navigationDividerColor: '#ffffff',\n    navigationDividerColorDark: '#000000',\n    orientation: 'default',\n    packageId: '',\n    pwaUrl: '',\n    shortcuts: [],\n    signing: {\n      file: null,\n      alias: '',\n      fullName: '',\n      organization: '',\n      organizationalUnit: '',\n      countryCode: '',\n      keyPassword: '',\n      storePassword: ''\n    },\n    signingMode: 'none',\n    splashScreenFadeOutDuration: 300,\n    startUrl: '',\n    themeColor: '#ffffff',\n    webManifestUrl: ''\n  };\n}\n\nexport function createAndroidPackageOptionsFromManifest(manifestContext: ManifestContext): AndroidPackageOptions {\n  const maniUrl = manifestContext.manifestUrl;\n  const pwaUrl = manifestContext.siteUrl;\n  const manifest = manifestContext.manifest;\n\n  if (!pwaUrl) {\n    throw new Error(\"Can't find the current URL\");\n  }\n\n  if (!maniUrl) {\n    throw new Error('Cant find the manifest URL');\n  }\n\n  const appName = manifest.short_name || manifest.name || 'My PWA';\n  const packageName = generatePackageId(new URL(pwaUrl).hostname);\n  // Use standalone display mode unless the manifest has fullscreen specified.\n  const display =\n    manifest.display === 'fullscreen' ? 'fullscreen' : 'standalone';\n\n  const manifestIcons = manifest.icons || [];\n  const icon = findBestAppIcon(manifestIcons);\n  if (!icon) {\n    throw new Error(\n      \"Can't find a suitable icon to use for the Android package. Ensure your manifest has a square, large (512x512 or better) PNG icon.\"\n    );\n  }\n\n  const maskableIcon =\n    findSuitableIcon(manifestIcons, 'maskable', 512, 512, 'image/png') ||\n    findSuitableIcon(manifestIcons, 'maskable', 192, 192, 'image/png') ||\n    findSuitableIcon(manifestIcons, 'maskable', 192, 192, undefined);\n  const monochromeIcon =\n    findSuitableIcon(manifestIcons, 'monochrome', 512, 512, 'image/png') ||\n    findSuitableIcon(manifestIcons, 'monochrome', 192, 192, 'image/png') ||\n    findSuitableIcon(manifestIcons, 'monochrome', 192, 192, undefined);\n  const navColorOrFallback =\n    manifest.theme_color || manifest.background_color || '#000000';\n\n  // Support URL-encoded manifests. See https://github.com/pwa-builder/PWABuilder/issues/1926\n  // When URL-encoded manifest is the manifest URL, we can resolve relative paths using the PWA URL itself.\n  // For example, consider this manifest declaration:\n  //    <link rel=\"manifest\" href=\"data:application/manifest+json,...\" />\n  // The manifestUrl will be \"data:application/manifest+json,...\"\n  // In this case, we can't do new URL(\"/foo.png\", \"data:application/manifest+json\") - it will throw an error.\n  // Instead, we can resolve the absolute URL using the PWA URL itself.\n  const manifestUrlOrRoot = maniUrl.startsWith(\n    'data:application/manifest+json,'\n  )\n    ? pwaUrl\n    : maniUrl;\n\n  return {\n    appVersion: '1.0.0.0',\n    appVersionCode: 1,\n    backgroundColor:\n      manifest.background_color ||\n      manifest.theme_color ||\n      '#FFFFFF',\n    display: display,\n    enableNotifications: true,\n    enableSiteSettingsShortcut: true,\n    fallbackType: 'customtabs',\n    features: {\n      locationDelegation: {\n        enabled: true,\n      },\n      playBilling: {\n        enabled: false,\n      },\n    },\n    host: new URL(pwaUrl).host,\n    iconUrl: getAbsoluteUrl(icon.src, manifestUrlOrRoot),\n    includeSourceCode: false,\n    isChromeOSOnly: false,\n    launcherName: (manifest.short_name || appName || 'My PWA').substring(0, 30), // launcher name should be the short name. If none is available, fallback to the full app name.\n    maskableIconUrl: getAbsoluteUrl(maskableIcon?.src, manifestUrlOrRoot),\n    monochromeIconUrl: getAbsoluteUrl(monochromeIcon?.src, manifestUrlOrRoot),\n    name: appName,\n    navigationColor: navColorOrFallback,\n    navigationColorDark: navColorOrFallback,\n    navigationDividerColor: navColorOrFallback,\n    navigationDividerColorDark: navColorOrFallback,\n    orientation: manifest.orientation || 'default',\n    packageId: packageName,\n    shortcuts: manifest.shortcuts || [],\n    signing: {\n      file: null,\n      alias: 'my-key-alias',\n      fullName: `${manifest.short_name || manifest.name || 'App'} Admin`,\n      organization: manifest.name || 'PWABuilder',\n      organizationalUnit: 'Engineering',\n      countryCode: 'US',\n      keyPassword: '', // If empty, one will be generated by CloudAPK service\n      storePassword: '', // If empty, one will be generated by CloudAPK service\n    },\n    signingMode: 'new',\n    splashScreenFadeOutDuration: 300,\n    startUrl: getStartUrlRelativeToHost(\n      manifest.start_url,\n      new URL(manifestUrlOrRoot)\n    ),\n    themeColor: manifest.theme_color || '#FFFFFF',\n    shareTarget: manifest.share_target,\n    webManifestUrl: maniUrl,\n    pwaUrl: manifestContext.siteUrl\n  };\n}\n\n/**\n * Resolves a relative URL to an absolute URL based on the manifest URL.\n * If relativeUrl is null, this will return an empty string.\n * @param relativeUrl The relative URL to make absolute.\n * @param manifestUrl The absolute URL to the web manifest.\n */\nfunction getAbsoluteUrl(\n  relativeUrl: string | undefined,\n  manifestUrl: string\n): string {\n  if (!relativeUrl) {\n    return '';\n  }\n\n  return new URL(relativeUrl, manifestUrl).toString();\n}\n\nfunction getStartUrlRelativeToHost(\n  startUrl: string | null | undefined,\n  manifestUrl: URL | string\n) {\n  // Example with expected output:\n  // - IN: startUrl = \"./index.html?foo=1\"\n  // - IN: manifestUrl = \"https://www.foo.com/subpath/manifest.json\"\n  // - OUT: \"/subpath/index.html?foo=1\"\n\n  // The start URL we send to the CloudAPK service should be a URL relative to the host.\n  const absoluteStartUrl = new URL(startUrl || '/', manifestUrl);\n\n  return absoluteStartUrl.pathname + (absoluteStartUrl.search || '');\n\n  // COMMENTED OUT: Old PWABuilder v2 URL creation. Commented out because we can do the same thing in less code above.\n  // if (\n  //   !manifest.start_url ||\n  //   manifest.start_url === '/' ||\n  //   manifest.start_url === '.' ||\n  //   manifest.start_url === './'\n  // ) {\n  //   // First, if we don't have a start_url in the manifest, or it's just \"/\",\n  //   // then we can just use that.\n  //   relativeStartUrl = '/';\n  // } else {\n  //   // The start_url in the manifest is either a relative or absolute path.\n  //   // Ensure it's a path relative to the root.\n  //   const absoluteStartUrl = new URL((manifest.start_url as string), maniURL);\n  //   relativeStartUrl =\n  //     absoluteStartUrl.pathname + (absoluteStartUrl.search || '');\n  // }\n}\n\nfunction updateAndroidOptionsWithSafeUrls(\n  options: AndroidPackageOptions\n): AndroidPackageOptions {\n  const absoluteUrlProps: Array<keyof AndroidPackageOptions> = [\n    'maskableIconUrl',\n    'monochromeIconUrl',\n    'iconUrl',\n    'webManifestUrl',\n  ];\n  for (const prop of absoluteUrlProps) {\n    const url = options[prop];\n    if (url && typeof url === 'string') {\n      const safeUrl = `${process.env.safeUrlFetcher}?url=${encodeURIComponent(\n        url\n      )}`;\n      (options as any)[prop] = safeUrl;\n    }\n  }\n  return options;\n}\n","import { Manifest } from \"@pwabuilder/manifest-validation\";\nimport { PackageOptions } from \"./interfaces\";\n\n\n/**\n * Package options for PWABuilder's iOS platform. Should match https://github.com/pwa-builder/pwabuilder-ios/blob/main/Microsoft.PWABuilder.IOS.Web/Models/IOSAppPackageOptions.cs\n */\nexport interface IOSAppPackageOptions extends PackageOptions {\n  name: string;\n  bundleId: string;\n  url: string;\n  imageUrl: string;\n  splashColor: string;\n  progressBarColor: string;\n  statusBarColor: string;\n  permittedUrls: string[];\n  manifestUrl: string;\n  manifest: Manifest;\n}\n\nexport function generateBundleId(host: string): string {\n  const parts = host\n    .split('.')\n    .reverse()\n    .map(p => p.trim().toLowerCase())\n    .filter(p => p.length > 0);\n  return parts.join('.');\n}\n\n/**\n * Validates the iOS app package options and returns errors as an array of strings. \n * The array will be empty if there are no errors.\n * @param options The options to validate.\n */\nexport function validateIOSOptions(options: IOSAppPackageOptions): string[] {\n  const errors: string[] = [];\n\n  if (!options.bundleId) {\n    errors.push(\"Bundle ID required\");\n  }\n  if (options.bundleId.length < 3) {\n    errors.push(\"Bundle ID must be at least 3 characters in length\");\n  }\n  if (options.bundleId.includes(\"*\")) {\n    errors.push(\"Bundle ID cannot contain asterisk\");\n  }\n\n  if (!options.imageUrl) {\n    errors.push(\"Image URL required\");\n  }\n\n  if (!options.manifest) {\n    errors.push(\"Manifest required\");\n  }\n\n  if (!options.manifestUrl) {\n    errors.push(\"Manifest URL required\");\n  }\n\n  if (!options.name) {\n    errors.push(\"Name required\");\n  }\n  if (options.name.length < 3) {\n    errors.push(\"Name must be at least 3 characters in length\");\n  }\n\n  if (!options.progressBarColor) {\n    errors.push(\"Progress bar color required\");\n  }\n\n  if (!options.splashColor) {\n    errors.push(\"Splash color required\");\n  }\n\n  if (!options.statusBarColor) {\n    errors.push(\"Status bar color required\");\n  }\n\n  if (!options.url) {\n    errors.push(\"URL required\");\n  }\n  try {\n    new URL(options.url);\n  } catch (urlError) {\n    errors.push(\"URL must be a valid, absolute URL\");\n  }\n\n  return errors;\n}","import { env } from \"../../utils/environment\";\nimport { findBestAppIcon } from \"../../utils/icons\";\nimport { ManifestContext } from \"../../utils/interfaces\";\nimport { generateBundleId, IOSAppPackageOptions, validateIOSOptions } from \"../../utils/ios-validation\";\n\nexport let hasGeneratedIOSPackage = false;\n\nexport async function generateIOSPackage(\n  options: IOSAppPackageOptions,\n): Promise<Blob> {\n  const validationErrors = validateIOSOptions(options);\n  if (validationErrors.length > 0) {\n    throw new Error(\n      'Invalid iOS app package options. ' + validationErrors.join('\\n')\n    );\n  }\n\n  const createPackageUrl = `${env.iosPackageGeneratorUrl}`;\n  const createPackageResponse = await fetch(createPackageUrl, {\n    method: 'POST',\n    body: JSON.stringify(options),\n    headers: new Headers({ 'content-type': 'application/json' }),\n  });\n\n  if (!createPackageResponse.ok) {\n    \n    const responseText = await createPackageResponse.text();\n\n    let err = new Error(\n      `Error generating iOS package.\\nStatus code: ${createPackageResponse.status}\\nError: ${createPackageResponse.statusText}\\nDetails: ${responseText}`\n    );\n\n    Object.defineProperty(createPackageResponse, \"stack_trace\", {value: responseText});\n    //@ts-ignore\n    err.response = createPackageResponse;\n    throw err;\n  }\n\n  hasGeneratedIOSPackage = true;\n  return await createPackageResponse.blob();\n}\n\nexport function createIOSPackageOptionsFromManifest(manifestContext: ManifestContext): IOSAppPackageOptions {\n  const host = [\n    manifestContext.siteUrl,\n    manifestContext.manifestUrl\n  ]\n    .map(i => tryGetHost(i))\n    .find(i => !!i) || '';\n\n  return {\n    name: manifestContext.manifest.short_name || manifestContext.manifest.name || \"My PWA\",\n    bundleId: generateBundleId(host),\n    url: new URL(manifestContext.manifest.start_url || \"/\", manifestContext.manifestUrl).toString(),\n    imageUrl: findBestAppIcon(manifestContext.manifest.icons)?.src || '',\n    splashColor: manifestContext.manifest.background_color || '#ffffff',\n    progressBarColor: manifestContext.manifest.theme_color || '#000000',\n    statusBarColor: manifestContext.manifest.theme_color || manifestContext.manifest.background_color || '#ffffff',\n    permittedUrls: [],\n    manifestUrl: manifestContext.manifestUrl,\n    manifest: manifestContext.manifest\n  };\n}\n\nexport function emptyIOSPackageOptions(): IOSAppPackageOptions {\n  return {\n    name: '',\n    bundleId: '',\n    url: '',\n    imageUrl: '',\n    splashColor: '#ffffff',\n    progressBarColor: '#000000',\n    statusBarColor: '#ffffff',\n    permittedUrls: [],\n    manifestUrl: '',\n    manifest: {}\n  }\n}\n\nfunction tryGetHost(url: string): string | null {\n  try {\n    return new URL(url).host;\n  } catch (hostError) {\n    console.warn(\"Unable to parse host URL due to error\", url, hostError);\n    return null;\n  }\n}","import { Manifest } from \"@pwabuilder/manifest-validation\";\nimport { validateAndroidPackageId } from \"./android-validation\";\nimport { PackageOptions } from \"./interfaces\";\n\n/**\n * Package options for PWABuilder's Oculus platform. Should match https://github.com/pwa-builder/pwabuilder-oculus/blob/main/Microsoft.PWABuilder.Oculus/Models/OculusAppPackageOptions.cs\n */\nexport interface OculusAppPackageOptions extends PackageOptions {\n  /**\n   * The ID of the app package, usually a reverse-domain style string, e.g. com.myawesomepwa\n   */\n  packageId: string;\n  /**\n   * The name of the app.\n   */\n  name: string;\n  /**\n   * The URL analyzed in PWABuilder.\n   */\n  url: string;\n  /**\n   * The Android version code of the Oculus app. Should be 1 or greater.\n   */\n  versionCode: number;\n  /**\n   * The version name displayed to end-users, e.g. \"1.0.0.0beta2\".\n   */\n  versionName: string;\n  /**\n   * The URL of the PWA's manifest.\n   */\n  manifestUrl: string;\n  /**\n   * The manifest of the PWA to generate the Oculus app package (APK) for.\n   */\n  manifest: Manifest;\n  /**\n   * The signing configuration: whether to skip signing the APK, whether to generate a new siging key to sign the APK with, or to use an existing signing key with which to sign the APK.\n   */\n  signingMode: SigningMode;\n  /**\n   * The signing key information. This should be specified only when SigningMode === SigningMode.Existing. Otherwise, this should be null.\n   */\n  existingSigningKey: SigningKeyInfo | null;\n}\n\nexport enum SigningMode {\n  /**\n   * No signing key. The Oculus APK will be unsigned.\n   */\n  None,\n  /**\n   * A new signing key will be generated and the APK will be signed with it.\n   */\n  New,\n  /**\n   * An existing signing key will be used to sign the APK.\n   */\n  Existing\n}\n\nexport interface SigningKeyInfo {\n  /** \n   * Base64-encoded .keystore file.\n   */\n  keyStoreFile: string;\n  /**\n   * The password for the .keystore file.\n   */\n  storePassword: string;\n  /**\n   * The alias of the key to use to sign the APK.\n   */\n  alias: string;\n  /**\n   * The password of the key to use to sign the APK.\n   */\n  password: string;\n}\n\n/**\n * Validates the iOS app package options and returns errors as an array of strings. \n * The array will be empty if there are no errors.\n * @param options The options to validate.\n */\nexport function validateOculusOptions(options?: OculusAppPackageOptions | null): string[] {\n  const errors: string[] = [];\n  if (!options) {\n    errors.push('No Oculus package options supplied');\n    return errors;\n  }\n\n  // Oculus package ID has the same validation as Android package ID.\n  validateAndroidPackageId(options.packageId)\n    .forEach(e => errors.push(e.error));\n\n  if (!options.name) {\n    errors.push('Name required');\n  } else if (options.name.length < 3 || options.name.length > 50) {\n    errors.push('Name must be between 3 and 50 characters in length');\n  }\n\n  if (!options.versionCode || options.versionCode <= 0) {\n    errors.push('Version code must be greater than zero');\n  }\n\n  if (!options.versionName) {\n    errors.push('Version name required');\n  }\n\n  if (!options.manifest) {\n    errors.push(\"Manifest required\");\n  }\n\n  if (!options.manifestUrl) {\n    errors.push('Manifest URL required');\n  }\n\n  try {\n    new URL(options.manifestUrl);\n  } catch (manifestUrlError) {\n    errors.push('Manifest URL must be a valid, absolute URL');\n  }\n\n  try {\n    new URL(options.url);\n  } catch (urlError) {\n    errors.push('Url must be a valid, absolute URL');\n  }\n\n  // It's OK for signing key to be null. But if we've specified an existing signing key, then\n  // we must also supply the key password, key alias, and store password.\n  if (options.signingMode === SigningMode.Existing) {\n    if (!options.existingSigningKey) {\n      errors.push('Existing signing key required when SigningMode === SigningMode.Existing');\n    } else {\n      if (!options.existingSigningKey.storePassword) {\n        errors.push('Store password required when using existing signing key');\n      }\n      if (!options.existingSigningKey.password) {\n        errors.push('Key password required when using existing signing key');\n      }\n      if (!options.existingSigningKey.alias) {\n        errors.push('Key alias required when using existing signing key');\n      }\n    }\n  }\n\n  return errors;\n}","import { generatePackageId } from \"../../utils/android-validation\";\nimport { env } from \"../../utils/environment\";\nimport { ManifestContext } from \"../../utils/interfaces\";\nimport { OculusAppPackageOptions, SigningKeyInfo, SigningMode, validateOculusOptions } from \"../../utils/oculus-validation\";\n\nexport let hasGeneratedOculusPackage = false;\n\nexport async function generateOculusPackage(\n  options: OculusAppPackageOptions,\n): Promise<Blob> {\n  const validationErrors = validateOculusOptions(options);\n  if (validationErrors.length > 0) {\n    throw new Error(\n      'Invalid Oculus app package options. ' + validationErrors.join('\\n')\n    );\n  }\n\n  const createPackageUrl = `${env.oculusPackageGeneratorUrl}`;\n  const createPackageResponse = await fetch(createPackageUrl, {\n    method: 'POST',\n    body: JSON.stringify(options),\n    headers: new Headers({ 'content-type': 'application/json' }),\n  });\n\n  if (!createPackageResponse.ok) {\n    \n    const responseText = await createPackageResponse.text();\n\n    let err = new Error(\n      `Error generating Oculus package.\\nStatus code: ${createPackageResponse.status}\\nError: ${createPackageResponse.statusText}\\nDetails: ${responseText}`\n    );\n    \n\n    Object.defineProperty(createPackageResponse, \"stack_trace\", {value: responseText});\n    //@ts-ignore\n    err.response = createPackageResponse;\n    \n    throw err;\n  }\n\n  hasGeneratedOculusPackage = true;\n  return await createPackageResponse.blob();\n}\n\nexport function createOculusPackageOptionsFromManifest(manifestContext: ManifestContext): OculusAppPackageOptions {\n  return {\n    name: manifestContext.manifest.short_name || manifestContext.manifest.name || \"My PWA\",\n    packageId: generatePackageId(new URL(manifestContext.siteUrl).host),\n    manifestUrl: manifestContext.manifestUrl,\n    manifest: manifestContext.manifest,\n    versionCode: 1,\n    versionName: '1.0.0.0',\n    existingSigningKey: null,\n    signingMode: SigningMode.New,\n    url: manifestContext.siteUrl\n  };\n}\n\nexport function emptyOculusPackageOptions(): OculusAppPackageOptions {\n  return {\n    name: '',\n    packageId: '',\n    manifestUrl: '',\n    manifest: {},\n    versionCode: 1,\n    versionName: '1.0.0.0',\n    existingSigningKey: null,\n    signingMode: SigningMode.New,\n    url: '',\n  };\n}\n\nexport function emptyOculusSigningKey(): SigningKeyInfo {\n  return {\n    keyStoreFile: '',\n    storePassword: '',\n    alias: '',\n    password: ''\n  };\n}","import { Manifest } from '@pwabuilder/manifest-validation';\nimport { PackageOptions } from './interfaces';\nimport { validateUrl } from './url';\n\n/**\n * Publisher options for the Windows Package generation.\n */\nexport interface WindowsPublisherOptions {\n  displayName: string;\n  commonName: string;\n}\n\n/**\n * Images to use for a Windows PWA. Should match server implementation: https://github.com/pwa-builder/pwabuilder-windows-chromium/blob/master/Models/WindowsImages.cs\n */\nexport interface WindowsImageOptions {\n  baseImage: string | null;\n  backgroundColor?: string | null; // null or undefined = best guess the background using the base image pixel (0,0)\n  padding?: number; // should be between 0 (no padding) and 1 (max padding)\n}\n\nexport interface WindowsPackageOptions  extends PackageOptions {\n  name: string;\n  packageId: string;\n  url: string;\n  version: string;\n  allowSigning?: boolean;\n  edgeChannel?: 'stable' | 'beta' | 'dev' | 'canary' | 'internal';\n  edgeLaunchArgs?: string;\n  appUserModelId?: string;\n  generateModernPackage?: boolean;\n  manifestUrl?: string;\n  manifest?: Manifest;\n  classicPackage?: {\n    generate?: boolean;\n    version?: string;\n    url?: string;\n  };\n  edgeHtmlPackage?: {\n    generate?: boolean;\n    version?: string;\n    url?: string;\n    urlsWithWindowsRuntimeAccess?: string[];\n  };\n  images?: WindowsImageOptions;\n  publisher: WindowsPublisherOptions;\n  resourceLanguage?: string;\n  targetDeviceFamilies?: string[];\n}\n\ntype WindowsPackageValidationError = {\n  field: keyof WindowsPackageOptions | keyof WindowsPublisherOptions | null;\n  error: string;\n};\n\ntype WindowsVersionInfo = {\n  name: keyof WindowsPackageOptions | keyof WindowsPublisherOptions | null;\n  label: string;\n  value: string | null;\n};\n\nexport function validatePackageID(id: string) {\n  if (id && id.length >= 2) {\n    const newID = id.replace(/\\s+/g, '');\n    return newID;\n  } else {\n    throw `Package ID should be atleast 3 characters long: ${id}`;\n  }\n}\n\nconst DISALLOWED_WINDOWS_PACKAGE_CHARS_REGEX = /[^a-zA-Z0-9_]/g;\n\nexport function generateWindowsPackageId(host: string): string {\n  const parts = host\n    .split('.')\n    .reverse()\n    .map(p => p.trim().toLowerCase())\n    .filter(p => p.length > 0)\n    .map(p => p.replace(DISALLOWED_WINDOWS_PACKAGE_CHARS_REGEX, '-'));\n  parts.push('edge');\n  return parts.join('.').slice(0, 50);\n}\n\nexport function validateWindowsOptions(\n  options: WindowsPackageOptions\n): WindowsPackageValidationError[] {\n  const validationErrors: WindowsPackageValidationError[] = [];\n  if (!options) {\n    validationErrors.push({ field: null, error: 'No options specified ' });\n    return validationErrors;\n  }\n\n  if (!options.packageId) {\n    validationErrors.push({ field: 'packageId', error: 'No package ID' });\n  }\n\n  if (!options.name || options.name.trim().length === 0) {\n    validationErrors.push({ field: 'name', error: 'App name required' });\n  } else if (options.name.trim().length >= 256) {\n    validationErrors.push({\n      field: 'name',\n      error: 'App name must be less than 256 characters',\n    });\n  }\n\n  const versionTrimmed = (options.version || '').trim();\n  // For Anaheim packages, we need to validate both version and classic version.\n  if (!options.classicPackage) {\n    validationErrors.push({\n      field: 'classicPackage',\n      error: 'Must have classic package information',\n    });\n  } else {\n    const classicVersionTrimmed = (options.classicPackage.version || '').trim();\n    if (!versionTrimmed || !classicVersionTrimmed) {\n      validationErrors.push({\n        field: 'version',\n        error: 'Must have an app version and a classic package version',\n      });\n    } else {\n      validationErrors.push(\n        ...validateWindowsAnaheimPackageVersions(\n          versionTrimmed,\n          classicVersionTrimmed\n        )\n      );\n    }\n  }\n\n  // Validating publisher options\n  if (!options.publisher) {\n    validationErrors.push({\n      field: 'publisher',\n      error: 'Publisher information required.',\n    });\n  } else {\n    if (!options.publisher.commonName) {\n      validationErrors.push({\n        field: 'commonName',\n        error: 'Publisher ID required.',\n      });\n    }\n\n    if (!options.publisher.displayName) {\n      validationErrors.push({\n        field: 'displayName',\n        error: 'Publisher display name required.',\n      });\n    }\n  }\n\n  if (!options.url) {\n    validationErrors.push({\n      field: 'url',\n      error:\n        \"Start URL must be specified. If your start URL is the same as Host, you can use '/' as the start URL.\",\n    });\n  } else {\n    const startUrlError = validateUrl(options.url);\n    if (startUrlError) {\n      validationErrors.push({ field: 'url', error: 'URL is invalid' });\n    }\n  }\n\n  return validationErrors;\n}\n\nfunction validateWindowsAnaheimPackageVersions(\n  version: string,\n  classicVersion: string\n): WindowsPackageValidationError[] {\n  const versionErrors: WindowsPackageValidationError[] = [];\n  const versionArray = version.split('.').map(Number);\n  const classicVersionArray = classicVersion.split('.').map(Number);\n  let isValidVersion = null;\n\n  // Common validation run on both version and classic version.\n  const versionInfos: WindowsVersionInfo[] = [\n    { name: 'version', label: 'Version', value: version },\n    { name: 'classicPackage', label: 'Classic version', value: classicVersion },\n  ];\n\n  for (const versionInfo of versionInfos) {\n    versionErrors.push(...validateVersion(versionInfo));\n  }\n\n  // Make sure the version is > classic version\n  for (var i = 0; i < versionArray.length; i++) {\n    if (versionArray[i]! < classicVersionArray[i]!) {\n      isValidVersion = false;\n      break;\n    }\n    if (versionArray[i]! > classicVersionArray[i]!) {\n      isValidVersion = true;\n      break;\n    }\n  }\n  // Check if versions are equal\n  if (i == versionArray.length) {\n    isValidVersion = false;\n  }\n\n  if (!isValidVersion) {\n    versionErrors.push({\n      field: 'version',\n      error: 'App version must be greater than classic package version',\n    });\n  }\n\n  return versionErrors;\n}\n\nfunction validateVersion(\n  versionInfo: WindowsVersionInfo\n): WindowsPackageValidationError[] {\n  const versionErrors: WindowsPackageValidationError[] = [];\n\n  // Version must be 3 segments (\"1.0.0\") - the 4th segment is reserved for Store use.\n  const segments = versionInfo.value ? versionInfo.value.split('.') : [];\n  if (segments.length !== 3) {\n    versionErrors.push({\n      field: versionInfo.name,\n      error: `${versionInfo.label} must have 3 segments: 1.0.0.`,\n    });\n  }\n\n  // All the segments must be numbers.\n  if (segments.some(s => !s.match(/^(0|[1-9][0-9]*)$/))) {\n    versionErrors.push({\n      field: versionInfo.name,\n      error: `${versionInfo.label} must only contain integers separated by periods.`,\n    });\n  }\n\n  // Version must be 1.0.0 or greater; Store doesn't support versions starting with zero.\n  const segmentValues = segments.map(s => parseInt(s));\n  if (segmentValues && segmentValues.length > 0 && segmentValues[0]! <= 0) {\n    versionErrors.push({\n      field: versionInfo.name,\n      error: `${versionInfo.label} must start with an integer >= 1.`,\n    });\n  }\n\n  return versionErrors;\n}\n","import { Manifest } from '@pwabuilder/manifest-validation';\nimport { env } from '../../utils/environment';\nimport { findBestAppIcon } from '../../utils/icons';\nimport {\n  generateWindowsPackageId,\n  validateWindowsOptions,\n  WindowsPackageOptions,\n} from '../../utils/win-validation';\nimport { getURL, getManifestUrl } from '../app-info';\nimport { fetchOrCreateManifest } from '../manifest';\n\nexport let hasGeneratedWindowsPackage = false;\n\nexport async function generateWindowsPackage(\n  windowsOptions: WindowsPackageOptions\n) {\n  if (!windowsOptions) {\n    // this.showErrorMessage(\"Invalid Windows options. No options specified.\");\n    throw new Error('Invalid Windows options. No options specified.');\n  }\n\n  const validationErrors = validateWindowsOptions(windowsOptions);\n  if (validationErrors.length > 0 || !windowsOptions) {\n    throw new Error(\n      'Invalid Windows options. ' +\n        validationErrors.map(a => a.error).join('\\n')\n    );\n  }\n  //console.info('Before fetching windows package');\n  const response = await fetch(`${env.windowsPackageGeneratorUrl}`, {\n    method: 'POST',\n    body: JSON.stringify(windowsOptions),\n    headers: new Headers({ 'content-type': 'application/json' }),\n  });\n  //console.info('After fetching windows package', response);\n  if (response.status === 200) {\n    const data = await response.blob();\n\n    //set generated flag\n    hasGeneratedWindowsPackage = true;\n    //console.info('After fetching windows package', data);\n    return data;\n  } else {\n    const responseText = await response.text();\n    let err = new Error(\n      `Failed. Status code ${response.status}, Error: ${response.statusText}, Details: ${responseText}`\n    );\n    Object.defineProperty(response, \"stack_trace\", {value: responseText});\n      //@ts-ignore\n      err.response = response;\n    throw err;\n    \n  }\n}\n\nexport function emptyWindowsPackageOptions(): WindowsPackageOptions {\n  return {\n    name: '',\n    packageId: '',\n    url: '',\n    version: '1.0.0.1',\n    manifestUrl: '',\n    classicPackage: {\n      generate: true,\n      version: '1.0.0.0',\n      url: '',\n    },\n    publisher: {\n      displayName: '',\n      commonName: '',\n    },\n  };\n}\n\nexport function createWindowsPackageOptionsFromManifest(\n  manifest: Manifest\n): WindowsPackageOptions {\n  const maniURL = getManifestUrl();\n  const pwaURL = getURL();\n\n  if (!pwaURL) {\n    throw new Error(\"Can't find the current URL\");\n  }\n\n  if (!maniURL) {\n    throw new Error('Cant find the manifest URL');\n  }\n\n  const name = manifest.short_name || manifest.name || 'My PWA';\n  const packageID = generateWindowsPackageId(new URL(pwaURL).hostname);\n  const manifestIcons = manifest.icons || [];\n\n  const icon = findBestAppIcon(manifestIcons);\n  const options: WindowsPackageOptions = {\n    name: name as string,\n    packageId: packageID,\n    url: pwaURL,\n    version: '1.0.1',\n    allowSigning: true,\n    publisher: {\n      displayName: 'Contoso, Inc.',\n      commonName: 'CN=3a54a224-05dd-42aa-85bd-3f3c1478fdca',\n    },\n    generateModernPackage: true,\n    classicPackage: {\n      generate: true,\n      version: '1.0.0',\n      url: pwaURL,\n    },\n    edgeHtmlPackage: {\n      generate: false,\n    },\n    manifestUrl: maniURL,\n    manifest: manifest,\n    images: {\n      baseImage: icon?.src || '',\n      backgroundColor: manifest.background_color || 'transparent',\n      padding: 0.0,\n    },\n    resourceLanguage: manifest?.lang,\n  };\n\n  return options;\n}\n\nexport async function createWindowsPackageOptionsFromForm(\n  form: HTMLFormElement\n): Promise<WindowsPackageOptions> {\n  let manifest: Manifest;\n  try {\n    const manifestContext = await fetchOrCreateManifest();\n    manifest = manifestContext!.manifest;\n  } catch {\n    return createEmptyPackageOptions();\n  }\n\n  const name = form.appName.value || manifest.short_name || manifest.name;\n  const packageID = form.packageId.value;\n  const manifestIcons = manifest.icons || [];\n  const icon = findBestAppIcon(manifestIcons);\n  return {\n    name: name,\n    packageId: packageID,\n    url: form.url.value || getURL(),\n    version: form.appVersion.value || '1.0.1',\n    allowSigning: true,\n    publisher: {\n      displayName: form.publisherDisplayName.value,\n      commonName: form.publisherId.value,\n    },\n    generateModernPackage: true,\n    classicPackage: {\n      generate: true,\n      version: form.classicVersion.value || '1.0.0',\n      url: form.url.value || getURL(),\n    },\n    edgeHtmlPackage: {\n      generate: false,\n    },\n    manifestUrl: form.manifestUrl.value || getManifestUrl(),\n    manifest: manifest,\n    images: {\n      baseImage: form.iconUrl.value || icon,\n      backgroundColor: 'transparent', // TODO: should we let the user specify image background color in the form?\n      padding: 0.0,\n    },\n    resourceLanguage: form.windowsLanguageInput.value || 'EN-US',\n  };\n}\n\nfunction createEmptyPackageOptions(): WindowsPackageOptions {\n  return {\n    name: '',\n    packageId: '',\n    url: '',\n    version: '',\n    publisher: {\n      displayName: '',\n      commonName: '',\n    },\n  };\n}\n","import { AndroidPackageOptions } from '../../utils/android-validation';\nimport { PackageOptions } from '../../utils/interfaces';\nimport { IOSAppPackageOptions } from '../../utils/ios-validation';\nimport { OculusAppPackageOptions } from '../../utils/oculus-validation';\nimport { WindowsPackageOptions } from '../../utils/win-validation';\nimport {\n  generateAndroidPackage,\n} from './android-publish';\nimport { generateIOSPackage } from './ios-publish';\nimport { generateOculusPackage } from './oculus-publish';\nimport {\n  generateWindowsPackage,\n} from './windows-publish';\n\nexport type Platform = 'windows' | 'android' | 'other-android' | 'ios' | 'meta';\n\ntype PackageInfo = {\n  appName: string;\n  blob: Blob | null;\n  type: string;\n};\n\nexport async function generatePackage(\n  type: Platform,\n  packageOptions?: PackageOptions\n): Promise<PackageInfo | null> {\n  switch (type) {\n    case 'windows':\n      return await tryGenerateWindowsPackage(packageOptions as WindowsPackageOptions);\n    case 'android':\n      return await tryGenerateAndroidPackage(packageOptions as AndroidPackageOptions);\n    case 'ios':\n      return await tryGenerateIOSPackage(packageOptions as IOSAppPackageOptions);\n    case 'meta':\n      return await tryGenerateOculusPackage(packageOptions as OculusAppPackageOptions);\n    default:\n      throw new Error(\n        `A platform type must be passed, ${type} is not a valid platform.`\n      );\n  }\n}\n\nasync function tryGenerateIOSPackage(options: IOSAppPackageOptions): Promise<PackageInfo | null> {\n  const result = await generateIOSPackage(options);\n  return {\n    appName: options.name,\n    blob: result,\n    type: \"store\"\n  };\n}\n\nasync function tryGenerateOculusPackage(options: OculusAppPackageOptions): Promise<PackageInfo | null> {\n  const result = await generateOculusPackage(options);\n  return {\n    appName: options.name,\n    blob: result,\n    type: \"store\"\n  };\n}\n\nasync function tryGenerateWindowsPackage(packageOptions: WindowsPackageOptions): Promise<PackageInfo | null> {\n  const blob = await generateWindowsPackage(packageOptions);\n  return {\n    appName: packageOptions.name,\n    blob: blob || null,\n    type: 'store',\n  };\n}\n\nasync function tryGenerateAndroidPackage(options: AndroidPackageOptions): Promise<PackageInfo | null> {\n  const blob = await generateAndroidPackage(options);\n  return {\n    appName: options.name,\n    blob: blob || null,\n    type: 'store',\n  };\n}\n","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, state, property } from 'lit/decorators.js';\nimport { smallBreakPoint } from \"../utils/css/breakpoints\";\n\n/**\n * A tooltip that can receive focus or contain clickable elements.\n * Usage: \n *  <hover-tooltip anchor=\"my-button-id\" text=\"hello, world\" link=\"https://test.com\"></hover-tooltip>\n */\n@customElement('hover-tooltip')\nexport class HoverTooltip extends LitElement {\n  // The selector of the element for which to show the focusable tooltip.\n  @property() anchor: string = '';\n  @property({ type: String }) text = '';\n  @property({ type: String }) link = '';\n  @state() tooltipVisible = false;\n  @state() tooltipLocation: [number, number] = [0, 0];\n  \n  anchorElement: HTMLElement | null | undefined = null;\n  tooltipContainsFocus = false;\n  tooltipContainsHover = false;\n  anchorContainsFocus = false;\n  anchorContainsHover = false;  \n  hideTooltipTimeoutHandle = 0;\n  mouseEnterListener = () => this.anchorMouseEntered();\n  focusInListner = () => this.anchorFocused();\n  mouseLeaveListener = () => this.anchorMouseLeave();\n  focusOutListener = () => this.anchorBlurred();\n  \n  static get styles() {\n    return css`\n      .tooltip-dialog {\n        position: absolute;\n        margin: 0px;\n        box-shadow: 0 0 5px gray;\n        background-color: #000;\n        opacity: 0;\n        transform: translate(10px, 5px); /* shift it down and to the right a bit */\n        transition: opacity 0.2s ease-in-out;\n        visibility: collapse;\n        border-radius: 0.25rem;\n        z-index: 1000;\n        width: max-content;\n        max-width: 250px;\n      }\n\n      .tooltip-dialog.show {\n        opacity: 1;\n        pointer-events: auto;\n        visibility: visible;\n      }\n\n      .tooltip-inner {\n        position: relative;\n        color: #fff;\n        font-size: 14px;\n        font-weight: normal;\n        padding: 0px 15px 0px 15px;\n        line-height: 21px;\n      }\n\n      ${smallBreakPoint(\n        css`\n          .tooltip-inner {\n            max-width: 200px;\n          }\n        `\n      )}\n\n      a, a:hover, a:active {\n        color: white;\n        display: block;\n        margin-bottom: 15px;\n      }\n    `;\n  }\n\n  constructor() {\n    super();\n  }\n\n  connectedCallback(): void {\n    super.connectedCallback();\n\n    if (!this.anchor) {\n      console.error(\"Attempted to use a <hover-tooltip>, but didn't set the anchor. It should be set to the ID of the element the tooltip is for.\");\n      return;\n    }\n\n    this.anchorElement = this.parentNode?.querySelector(`#${this.anchor}`);\n    if (this.anchorElement) {\n      this.anchorElement.addEventListener(\"mouseenter\", this.mouseEnterListener, { passive: true });\n      this.anchorElement.addEventListener(\"mouseleave\", this.mouseLeaveListener, { passive: true });\n      this.anchorElement.addEventListener(\"focusin\", this.focusInListner, { passive: true });\n      this.anchorElement.addEventListener(\"focusout\", this.focusOutListener, { passive: true });\n    }\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    if (this.anchorElement) {\n      this.anchorElement.removeEventListener(\"mouseenter\", this.mouseEnterListener);\n      this.anchorElement.removeEventListener(\"mouseleave\", this.focusInListner);\n      this.anchorElement.removeEventListener(\"focusin\", this.mouseEnterListener);\n      this.anchorElement.removeEventListener(\"focusout\", this.focusOutListener);\n    }\n\n    clearTimeout(this.hideTooltipTimeoutHandle);\n  }\n\n  showTooltip() {\n    if (this.anchorElement) {\n      // Position the tooltip.\n      // This is a little tricky:\n      //  - If the element is affected by the body's scrollbar,\n      //    then we need to account for that in the tooltip position.      \n\n      // If there's not an absolute or fixed position parent (i.e. we're not in a modal)\n      // then we need to offset the Y by the window scroll amount.\n      let scrollOffset = 0;\n      const isInModal = !!this.getAbsoluteOrFixedOffsetParent(this.anchorElement);\n      if (!isInModal) {\n        scrollOffset = window.scrollY;\n      }\n\n      // Grab the cumulative offset of the parents.\n      const boundingRect = this.anchorElement.getBoundingClientRect();\n      const [parentOffsetLeft, parentOffsetTop] = this.getCumulativeOffset(this.anchorElement);\n      const tooltipX = boundingRect.top + scrollOffset - parentOffsetTop;\n      const tooltipY = boundingRect.right - parentOffsetLeft;\n      this.tooltipLocation = [tooltipX, tooltipY];\n      this.tooltipVisible = true;\n    }\n  }\n\n  getCumulativeOffset(element: HTMLElement): [left: number, top: number] {\n    let top = 0;\n    let left = 0;\n    let parent = element.parentNode as HTMLElement;\n    while (parent != null) {\n      top += parent.offsetTop;\n      left += parent.offsetLeft;\n      parent = parent.parentNode as HTMLElement;\n    }\n    \n    return [\n      left,\n      top\n    ];\n  }\n\n  getAbsoluteOrFixedOffsetParent(el: HTMLElement): HTMLElement | null {\n    if (!el) {\n      return null;\n    }\n\n    // Walk up the offsetParent tree until we find an absolute or fixed position parent.\n    let parent = el.offsetParent as HTMLElement;\n    while (parent != null && parent !== document.body) {\n      const parentPositionStyle = window.getComputedStyle(parent, null).position;\n      if (parent.style && (parentPositionStyle === \"absolute\" || parentPositionStyle === 'fixed')) {\n        return parent;\n      }\n\n      parent = parent.offsetParent as HTMLElement;\n    }\n\n    return null;\n  }\n\n  hideTooltipIfNecessary() {    \n    // Don't hide the tooltip if any of these conditions are met:\n    //  - the anchor element contain focus\n    //  - the tooltip contains focus\n    //  - the mouse is over the anchor element\n    //  - the mouse is over the tooltip\n    const checkIfShouldBeHidden = () => {\n      this.tooltipVisible = \n        this.anchorContainsFocus || \n        this.anchorContainsHover ||\n        this.tooltipContainsFocus ||\n        this.tooltipContainsHover;\n    };\n\n    // Set a timer - if, after a brief moment, the mouse isn't on our target and isn't on the tooltip, hide it.\n    clearTimeout(this.hideTooltipTimeoutHandle);\n    this.hideTooltipTimeoutHandle = window.setTimeout(() => checkIfShouldBeHidden(), 350);\n  }\n\n  anchorMouseEntered() {\n    this.anchorContainsHover = true;\n    this.showTooltip();\n  }\n\n  anchorMouseLeave() {\n    this.anchorContainsHover = false;\n    this.hideTooltipIfNecessary();\n  }\n\n  anchorFocused() {\n    this.anchorContainsFocus = true;\n    this.showTooltip();\n  }\n\n  anchorBlurred() {\n    this.anchorContainsFocus = false;\n    this.hideTooltipIfNecessary();\n  }\n\n  tooltipMouseEntered() {\n    this.tooltipContainsHover = true;\n  }\n\n  tooltipMouseLeave() {\n    this.tooltipContainsHover = false;\n    this.hideTooltipIfNecessary();\n  }\n\n  tooltipFocused() {\n    this.tooltipContainsFocus = true;\n  }\n\n  tooltipBlurred() {\n    this.tooltipContainsFocus = false;\n    this.hideTooltipIfNecessary();\n  }\n\n  render(): TemplateResult {\n    const tooltipClass = this.tooltipVisible ? 'tooltip-dialog show' : 'tooltip-dialog';\n    return html`\n      <div class=\"${tooltipClass}\" \n        style=\"top: ${this.tooltipLocation[0]}px; left: ${this.tooltipLocation[1]}px;\"\n        @mouseover=\"${this.tooltipMouseEntered}\"\n        @mouseleave=\"${this.tooltipMouseLeave}\"\n        @focusin=\"${this.tooltipFocused}\"\n        @focusout=\"${this.tooltipBlurred}\">\n        <div class=\"tooltip-inner\">\n          <p>${this.text}</p>\n          ${this.renderLink()}\n        </div>\n      </div>\n    `;\n  }\n\n  renderLink(): TemplateResult {\n    if (!this.link) {\n      return html``;\n    }\n\n    return html`\n      <a target=\"_blank\" href=\"${this.link}\">\n        Read more...\n      </a>\n    `;\n  }\n}","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport '../components/hover-tooltip';\n\n/**\n * A component that renders a round circle with a question mark in it.\n * When hovered or focused, a <hover-tooltip> will be shown.\n */\n @customElement('info-circle-tooltip')\n export class InfoCircleTooltip extends LitElement {\n  @property({ type: String }) text = '';\n  @property({ type: String }) link = '';\n  readonly circleId = Math.random().toString(36).replace('0.', 'info-circle-');\n\n  static get styles() {\n    return css`\n      .info-circle-img {\n        height: 12px;\n        width: 12px;\n        border-radius: 50%;\n        background: #e5e5e5;\n        padding: 4px;\n        margin-left: 6px;\n      }\n    `;\n  }\n\n  constructor() {\n    super();\n  }\n\n  render(): TemplateResult {\n    return html`\n      <img id=\"${this.circleId}\" class=\"info-circle-img\" src=\"assets/images/help-outline.svg\" alt=\"help outline\"\n        aria-hidden=\"true\" />\n\n      <hover-tooltip anchor=\"${this.circleId}\" text=\"${this.text}\" link=\"${ifDefined(this.link)}\">\n      </hover-tooltip>\n    `;\n  }\n }","import { css, html, LitElement, TemplateResult } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n//@ts-ignore\nimport style from '../../../styles/form-styles.css';\n//@ts-ignore\nimport ModalStyles from '../../../styles/modal-styles.css';\nimport '../components/info-circle-tooltip';\nimport { customElement } from 'lit/decorators.js';\nimport { PackageOptions } from '../utils/interfaces';\n\n/**\n * Base class for app package forms, e.g. the Windows package form, the Android package form, the iOS package form, etc.\n * Shares styles across forms and shares common code, such as form label + input rendering, accordion toggling, etc.\n */\n@customElement('app-package-form-base')\nexport class AppPackageFormBase extends LitElement {\n\n  static get styles() {\n    const localStyles =  css`\n      #form-layout input {\n        border: 1px solid rgba(194, 201, 209, 1);\n        border-radius: var(--input-radius);\n        color: var(--font-color);\n      }\n\n      #form-layout input:not([type='color']) {\n        padding: 10px;\n      }\n\n      input::placeholder {\n        color: var(--placeholder-color);\n        font-style: italic;\n      }\n\n\n      info-circle-tooltip {\n        margin-top: 4px;\n      }\n\n      sl-button::part(base) {\n        background-color: black;\n        color: white;\n        font-size: 14px;\n        height: 3em;\n        width: 25%;\n        border-radius: 50px;\n      }\n\n      sl-button::part(label){\n        display: flex;\n        align-items: center;\n      }\n\n      #form-layout {\n        overflow-y: auto;\n        padding: 0em 1.5em 0 1em;\n      }\n\n      .tooltip {\n        margin-left: 10px;\n      }\n\n      .form-group .tooltip a {\n        color: #fff;\n      }\n\n      .form-group {\n        display: flex;\n        flex-direction: column;\n      }\n\n      .form-group label {\n        font-size: var(--small-medium-font-size);\n        font-weight: bold;\n        line-height: 40px;\n        display: flex;\n        align-items: center;\n      }\n\n      .form-group label a {\n        text-decoration: none;\n        color: var(--font-color);\n      }\n\n      #form-options-actions {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n        gap: .25em;\n      }\n\n      #form-details-block {\n        display: flex;\n        align-items: flex-start;\n        flex-direction: column;\n        justify-content: space-between;\n        width: 55%;\n        gap: .25em;\n      }\n\n      #form-details-block p {\n        font-weight: 300;\n        font-size: 14px;\n        color: #808080;\n        margin: 0;\n      }\n\n      .select-group {\n        display: flex;\n        margin-bottom: 10px;\n        padding-left: 2em;\n      }\n\n      #all-settings-header {\n        color: var(--font-color);\n        font-weight: var(--font-bold);\n        font-size: 18px;\n\n        display: flex;\n        align-items: center;\n      }\n\n      .form-check {\n        display: flex;\n        align-items: center;\n      }\n\n      .form-check label {\n        font-weight: normal;\n        margin-left: 8px;\n      }\n\n      #form-layout input:invalid {\n        color: var(--error-color);\n        border: 1px solid var(--error-color);\n      }\n\n\n      @media (min-height: 760px) and (max-height: 1000px) {\n        form {\n          width: 100%;\n        }\n      }\n    `\n    return [localStyles];\n  }\n\n  constructor() {\n    super();\n  }\n\n  getPackageOptions(): PackageOptions {\n    return {};\n  }\n\n  getForm(): HTMLFormElement | undefined {\n    return undefined;\n  }\n\n  protected renderFormInput(formInput: FormInput): TemplateResult {\n    // If it's a checkbox or radio, the label comes after the check\n    if (formInput.type === 'checkbox' || formInput.type === 'radio') {\n      return html`\n        ${this.renderFormInputTextbox(formInput)}\n        ${this.renderFormInputLabel(formInput)}\n      `;\n    }\n\n    // For all others, the label comes first.\n    return html`\n      ${this.renderFormInputLabel(formInput)}\n      ${this.renderFormInputTextbox(formInput)}\n    `;\n  }\n\n  private renderFormInputTextbox(formInput: FormInput): TemplateResult {\n    const inputType = formInput.type || 'text';\n    const inputClass = formInput.type === 'radio' ? 'form-check-input' : 'form-control';\n    return html`\n      <input id=\"${formInput.inputId}\" class=\"${inputClass}\" placeholder=\"${formInput.placeholder || ''}\"\n        value=\"${ifDefined(formInput.value)}\" type=\"${inputType}\" ?required=\"${formInput.required}\"\n        name=\"${ifDefined(formInput.name)}\" minlength=\"${ifDefined(formInput.minLength)}\"\n        maxlength=\"${ifDefined(formInput.maxLength)}\" min=${ifDefined(formInput.minValue)}\n        max=\"${ifDefined(formInput.maxValue)}\" pattern=\"${ifDefined(formInput.pattern)}\"\n        spellcheck=\"${ifDefined(formInput.spellcheck)}\" ?checked=\"${formInput.checked}\" ?readonly=\"${formInput.readonly}\"\n        custom-validation-error-message=\"${ifDefined(formInput.validationErrorMessage)}\"\n        @input=\"${(e: UIEvent) => this.inputChanged(e, formInput)}\" @invalid=${this.inputInvalid} />\n    `;\n  }\n\n  private renderFormInputLabel(formInput: FormInput): TemplateResult {\n    return html`\n      <label for=\"${formInput.inputId}\">\n        ${formInput.label}\n        ${this.renderTooltip(formInput)}\n      </label>\n    `;\n  }\n\n  protected renderTooltip(formInput: FormInput): TemplateResult {\n    if (!formInput.tooltip) {\n      return html``;\n    }\n\n    // Ensure we have an ID for this element. If not, add one.\n    // We need it for the tooltip.\n    if (!formInput.inputId) {\n      formInput.inputId = Math.random().toString(36).replace('0.', 'form-input-');\n    }\n\n    return html`\n      <info-circle-tooltip text=\"${formInput.tooltip}\" link=\"${ifDefined(formInput.tooltipLink)}\">\n      </info-circle-tooltip>\n    `;\n  }\n\n  private inputChanged(e: UIEvent, formInput: FormInput) {\n    const inputElement = e.target as HTMLInputElement | null;\n    if (inputElement) {\n      // Fire the input handler\n      if (formInput.inputHandler) {\n        formInput.inputHandler(inputElement.value || '', inputElement.checked, inputElement);\n      }\n\n      // Run validation if necessary.\n      if (formInput.validationErrorMessage) {\n        const errorMessage = this.inputHasValidationErrors(inputElement) ? formInput.validationErrorMessage : '';\n        inputElement.setCustomValidity(errorMessage);\n        inputElement.title = errorMessage;\n      }\n    }\n  }\n\n  private inputInvalid(e: UIEvent) {\n    const element = e.target as HTMLInputElement;\n    if (element) {\n      this.expandParentAccordionIfNeeded(element);\n    }\n  }\n\n  private inputHasValidationErrors(input: HTMLInputElement): boolean {\n    const statesChecked = [\n      input.validity.badInput,\n      input.validity.patternMismatch,\n      input.validity.rangeOverflow,\n      input.validity.rangeUnderflow,\n      input.validity.stepMismatch,\n      input.validity.tooLong,\n      input.validity.tooShort,\n      input.validity.typeMismatch,\n      input.validity.valueMissing\n    ];\n\n    return statesChecked.some(s => s === true);\n  }\n\n  private expandParentAccordionIfNeeded(element: HTMLInputElement) {\n    // If the accordion is hiding any invalid inputs, open it.\n    const isInvalid = !element.validity.valid;\n    const parentAccordion = element.closest('fast-accordion-item');\n    if (parentAccordion && (parentAccordion as any).expanded === false && isInvalid) {\n      const accordionFlipper = parentAccordion.querySelector<HTMLElement>(\".flipper-button\");\n      accordionFlipper?.click();\n      setTimeout(() => {\n        element.scrollIntoView();\n        element.reportValidity();\n      }, 0);\n    }\n  }\n}\n\nexport interface FormInput {\n  label: string;\n  tooltip?: string;\n  tooltipLink?: string;\n  inputId: string;\n  name?: string;\n  type?: 'hidden' | 'text' | 'search' | 'tel' | 'url' | 'email' | 'password' | 'datetime' | 'date' | 'month' | 'week' | 'time' | 'datetime-local' | 'number' | 'range' | 'color' | 'checkbox' | 'radio' | 'file' | 'submit' | 'image' | 'reset' | 'button'\n  placeholder?: string;\n  value?: string;\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  minValue?: number;\n  maxValue?: number;\n  pattern?: string;\n  spellcheck?: boolean;\n  readonly?: boolean;\n  validationErrorMessage?: string;\n  checked?: boolean;\n  inputHandler?: (val: string, checked: boolean, input: HTMLInputElement) => void;\n}","import { css, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { getManifestContext, getManifestUrl } from '../services/app-info';\nimport {\n  createWindowsPackageOptionsFromManifest,\n  emptyWindowsPackageOptions,\n} from '../services/publish/windows-publish';\nimport { WindowsPackageOptions } from '../utils/win-validation';\nimport { AppPackageFormBase } from './app-package-form-base';\nimport { fetchOrCreateManifest } from '../services/manifest';\nimport { AnalyticsBehavior, recordPWABuilderProcessStep } from '../utils/analytics';\nimport { ManifestContext, PackageOptions } from '../utils/interfaces';\n\n@customElement('windows-form')\n\nexport class WindowsForm extends AppPackageFormBase {\n  @property({ type: Boolean }) generating: boolean = false;\n  @state() showAdvanced = false;\n  @state() packageOptions: WindowsPackageOptions = emptyWindowsPackageOptions();\n\n  static get styles() {\n    return [\n      ...super.styles,\n      css`\n        #windows-options-form {\n          width: 100%;\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n\n        }\n        .flipper-button {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        .form-generate-button {\n          width: 135px;\n          height: 40px;\n        }\n        .basic-settings, .adv-settings {\n          display: flex;\n          flex-direction: column;\n          gap: .75em;\n        }\n        #form-layout {\n          flex-grow: 1;\n          display: flex;\n          overflow: auto;\n          flex-direction: column;\n        }\n\n        sl-details {\n          margin-top: 1em;\n        }\n\n        sl-details::part(base){\n          border: none;\n        }\n\n        sl-details::part(summary-icon){\n          display: none;\n        }\n\n        .dropdown_icon {\n          transform: rotate(0deg);\n          transition: transform .5s;\n          height: 30px;\n        }\n\n        sl-details::part(header){\n          padding: 0 10px;\n        }\n\n        .details-summary {\n          display: flex;\n          align-items: center;\n          width: 100%;\n        }\n\n        .details-summary p {\n          margin: 0;\n          font-size: 18px;\n          font-weight: bold;\n        }\n\n    `\n    ];\n  }\n\n  constructor() {\n    super();\n  }\n\n  async firstUpdated() {\n    let manifestContext: ManifestContext | undefined = getManifestContext();\n    if (manifestContext.isGenerated) {\n      manifestContext = await fetchOrCreateManifest();\n    }\n\n    this.packageOptions = createWindowsPackageOptionsFromManifest(\n      manifestContext!.manifest\n    );\n\n    this.packageOptions.targetDeviceFamilies = ['Desktop', 'Holographic'];\n  }\n\n  toggleSettings(settingsToggleValue: 'basic' | 'advanced') {\n    if (settingsToggleValue === 'advanced') {\n      this.showAdvanced = true;\n    } else if (settingsToggleValue === 'basic') {\n      this.showAdvanced = false;\n    } else {\n      this.showAdvanced = false;\n    }\n  }\n\n  get manifestUrl(): string | null | undefined {\n    return getManifestUrl();\n  }\n\n  addOrRemoveDeviceFamily(val: string, checked: boolean) {\n    if (checked) {\n      if (!this.packageOptions.targetDeviceFamilies?.includes(val)) {\n        this.packageOptions.targetDeviceFamilies?.push(val);\n      }\n    } else {\n      let index: any = this.packageOptions.targetDeviceFamilies?.indexOf(\n        val,\n        0\n      );\n      if (index > -1) {\n        this.packageOptions.targetDeviceFamilies?.splice(index, 1);\n      }\n    }\n    this.checkValidityForDeviceFamily();\n  }\n\n  checkValidityForDeviceFamily() {\n    const checkboxes = this.shadowRoot?.querySelector(\n      '#target-device-families'\n    );\n    const checkedCheckboxes = checkboxes?.querySelectorAll(\n      'input[type=\"checkbox\"]:checked'\n    );\n    const desktopCheckbox = this.shadowRoot?.querySelector(\n      '#device-family-input-desktop'\n    ) as HTMLInputElement;\n    if (checkedCheckboxes !== undefined && checkedCheckboxes?.length === 0) {\n      desktopCheckbox.setCustomValidity(\n        'Please select at least one device family'\n      );\n    } else {\n      desktopCheckbox.setCustomValidity('');\n    }\n  }\n\n  rotateZero(){\n    recordPWABuilderProcessStep(\"windows_form_all_settings_expanded\", AnalyticsBehavior.ProcessCheckpoint);\n    let icon: any = this.shadowRoot!.querySelector('.dropdown_icon');\n    icon!.style.transform = \"rotate(0deg)\";\n  }\n\n  rotateNinety(){\n    recordPWABuilderProcessStep(\"windows_form_all_settings_collapsed\", AnalyticsBehavior.ProcessCheckpoint);\n    let icon: any = this.shadowRoot!.querySelector('.dropdown_icon');\n    icon!.style.transform = \"rotate(90deg)\";\n  }\n  \n  public getPackageOptions(): PackageOptions {\n    return this.packageOptions;\n  }\n\n  public getForm(): HTMLFormElement {\n    return this.shadowRoot!.querySelector(\"form\")!;\n  }\n\n  render() {\n    return html`\n    <div id=\"form-holder\">\n      <form\n        id=\"windows-options-form\"\n        slot=\"modal-form\"\n        style=\"width: 100%\"\n      >\n        <div id=\"form-layout\">\n          <div class=\"basic-settings\">\n            <div class=\"form-group\">\n              ${this.renderFormInput({\n                label: 'Package ID',\n                tooltip: `The Package ID uniquely identifying your app in the Microsoft Store. Get this value from Windows Partner Center.`,\n                tooltipLink:\n                  'https://blog.pwabuilder.com/docs/finding-your-windows-publisher-info/',\n                inputId: 'package-id-input',\n                required: true,\n                placeholder: 'MyCompany.MyApp',\n                minLength: 3,\n                maxLength: 50,\n                spellcheck: false,\n                pattern: '[a-zA-Z0-9.-]*$',\n                validationErrorMessage:\n                  'Package ID must contain only letters, numbers, period, or hyphen.',\n                inputHandler: (val: string) =>\n                  (this.packageOptions.packageId = val),\n              })}\n            </div>\n            <div class=\"form-group\">\n              ${this.renderFormInput({\n                label: 'Publisher display name',\n                tooltip: `The display name of your app's publisher. Gets this value from Windows Partner Center.`,\n                tooltipLink:\n                  'https://blog.pwabuilder.com/docs/finding-your-windows-publisher-info/',\n                inputId: 'publisher-display-name-input',\n                required: true,\n                minLength: 3,\n                spellcheck: false,\n                validationErrorMessage:\n                  'Publisher display name must be at least 3 characters. Get this value from Windows Partner Center.',\n                placeholder: 'Contoso Inc',\n                inputHandler: (val: string) =>\n                  (this.packageOptions.publisher.displayName = val),\n              })}\n            </div>\n            <div class=\"form-group\">\n              ${this.renderFormInput({\n                label: 'Publisher ID',\n                tooltip: `The ID of your app's publisher. Get this value from Windows Partner Center.`,\n                tooltipLink:\n                  'https://blog.pwabuilder.com/docs/finding-your-windows-publisher-info/',\n                inputId: 'publisher-id-input',\n                placeholder: 'CN=3a54a224-05dd-42aa-85bd-3f3c1478fdca',\n                validationErrorMessage:\n                  'Publisher ID must be in the format CN=XXXX. Get your publisher ID from Partner Center.',\n                pattern: 'CN=.+',\n                required: true,\n                spellcheck: false,\n                minLength: 4,\n                inputHandler: (val: string) =>\n                  (this.packageOptions.publisher.commonName = val),\n              })}\n            </div>\n          </div>\n          <!-- \"all settings\" section of the modal -->\n          <sl-details @sl-show=${() => this.rotateNinety()} @sl-hide=${() => this.rotateZero()}>\n            <div class=\"details-summary\" slot=\"summary\">\n              <p>All Settings</p>\n              <img class=\"dropdown_icon\" src=\"/assets/new/dropdownIcon.svg\" alt=\"dropdown toggler\"/>\n            </div>\n            <div class=\"adv-settings\">\n              <div class=\"form-group\">\n                ${this.renderFormInput({\n                  label: 'App name',\n                  tooltip: `The name of your app. This is displayed to users in the Store.`,\n                  tooltipLink:\n                    'https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-displayname',\n                  inputId: 'app-name-input',\n                  required: true,\n                  minLength: 1,\n                  maxLength: 256,\n                  value: this.packageOptions.name,\n                  placeholder: 'My Awesome PWA',\n                  pattern: \"[^|$@#><)(!&%*]*$\",\n                  validationErrorMessage:\n                    'App name must not include special characters and be between 1 and 256 characters',\n                  inputHandler: (val: string) =>\n                    (this.packageOptions.name = val),\n                })}\n              </div>\n              <div class=\"form-group\">\n                ${this.renderFormInput({\n                  label: 'App version',\n                  tooltip: `Your app version in the form of '1.0.0'. It must not start with zero and must be greater than classic package version. For new apps, this should be set to 1.0.1`,\n                  tooltipLink:\n                    'https://blog.pwabuilder.com/docs/what-is-a-classic-package/',\n                  inputId: 'version-input',\n                  required: true,\n                  minLength: 5,\n                  value: this.packageOptions.version,\n                  placeholder: '1.0.1',\n                  spellcheck: false,\n                  pattern: '^[^0]+\\\\d*.\\\\d+.\\\\d+$',\n                  validationErrorMessage:\n                    \"Version must be in the form of '1.0.0', cannot start with zero, and must be greater than classic version\",\n                  inputHandler: (val: string) =>\n                    (this.packageOptions.version = val),\n                })}\n              </div>\n              <div class=\"form-group\">\n                ${this.renderFormInput({\n                  label: 'Classic app version',\n                  tooltip: `The version of your app that runs on older versions of Windows. Must be in the form of '1.0.0', it cannot start with zero, and must be less than app version. For new apps, this should be set to 1.0.0`,\n                  tooltipLink:\n                    'https://blog.pwabuilder.com/docs/what-is-a-classic-package/',\n                  inputId: 'classic-version-input',\n                  required: true,\n                  minLength: 5,\n                  value: this.packageOptions.classicPackage?.version,\n                  placeholder: '1.0.0',\n                  pattern: '^[^0]+\\\\d*.\\\\d+.\\\\d+$',\n                  validationErrorMessage:\n                    \"Classic app version must be in the form of '1.0.0', cannot start with zero, and must be less than than app version\",\n                  inputHandler: (val: string) =>\n                    (this.packageOptions.classicPackage!.version = val),\n                })}\n              </div>\n              <div class=\"form-group\">\n                ${this.renderFormInput({\n                  label: 'Icon URL',\n                  tooltip: `The URL of an icon to use for your app. This should be a 512x512 or larger, square PNG image. Additional Windows image sizes will be fetched from your manifest, and any missing Windows image sizes will be generated by PWABuilder. The URL can be an absolute path or relative to your manifest.`,\n                  tooltipLink:\n                    'https://blog.pwabuilder.com/docs/image-recommendations-for-windows-pwa-packages/',\n                  inputId: 'icon-url-input',\n                  required: true,\n                  type: 'text', // NOTE: can't use URL here, because we allow relative paths.\n                  minLength: 2,\n                  validationErrorMessage:\n                    'Must be an absolute URL or a URL relative to your manifest',\n                  value: this.packageOptions.images?.baseImage || '',\n                  placeholder: '/images/512x512.png',\n                  inputHandler: (val: string) =>\n                    (this.packageOptions.images!.baseImage = val),\n                })}\n              </div>\n              <div class=\"form-group\">\n                ${this.renderFormInput({\n                  label: 'Language',\n                  tooltip: `Optional. The primary language for your app package. Additional languages can be specified in Windows Partner Center. If empty, EN-US will beused.`,\n                  tooltipLink:\n                    'https://docs.microsoft.com/en-us/windows/uwp/publish/supported-languages',\n                  inputId: 'language-input',\n                  value: this.packageOptions.resourceLanguage,\n                  placeholder: 'EN-US',\n                  inputHandler: (val: string) =>\n                    (this.packageOptions.resourceLanguage = val),\n                })}\n              </div>\n              <div class=\"form-group\" id=\"target-device-families\">\n                <label>Target device families</label>\n                <div class=\"form-check\">\n                  ${this.renderFormInput({\n                    label: 'Desktop',\n                    value: 'Desktop',\n                    tooltip:\n                      'Identifies the device family that your package targets. Both Desktop and Holographic are enabled by default',\n                    tooltipLink:\n                      'https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-targetdevicefamily',\n                    inputId: 'device-family-input-desktop',\n                    type: 'checkbox',\n                    checked: true,\n                    inputHandler: (val: string, checked: boolean) => {\n                      this.addOrRemoveDeviceFamily(val, checked);\n                    },\n                  })}\n                </div>\n                <div class=\"form-check\">\n                  ${this.renderFormInput({\n                    label: 'Holographic (HoloLens)',\n                    value: 'Holographic',\n                    tooltip:\n                      'Identifies the device family that your package targets. Both Desktop and Holographic are enabled by default',\n                    tooltipLink:\n                      'https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-targetdevicefamily',\n                    inputId: 'device-family-input-holographic',\n                    type: 'checkbox',\n                    checked: true,\n                    inputHandler: (val: string, checked: boolean) => {\n                      this.addOrRemoveDeviceFamily(val, checked);\n                    },\n                  })}\n                </div>\n                <div class=\"form-check\">\n                  ${this.renderFormInput({\n                    label: 'Surface Hub (Team)',\n                    value: 'Team',\n                    tooltip:\n                      'Identifies the device family that your package targets.',\n                    tooltipLink:\n                      'https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-targetdevicefamily',\n                    inputId: 'device-family-input-team',\n                    type: 'checkbox',\n                    checked: false,\n                    inputHandler: (val: string, checked: boolean) => {\n                      this.addOrRemoveDeviceFamily(val, checked);\n                    },\n                  })}\n                </div>\n              </div>\n            </div>\n          </sl-details>\n        </div>\n\n      </form>\n    </div>\n    `;\n  }\n}\n","import { css, html, PropertyValueMap, TemplateResult } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { fetchOrCreateManifest } from '../services/manifest';\nimport { createAndroidPackageOptionsFromManifest, emptyAndroidPackageOptions } from '../services/publish/android-publish';\nimport { ManifestContext, PackageOptions } from '../utils/interfaces';\nimport { localeStrings } from '../../locales';\nimport { AppPackageFormBase } from './app-package-form-base';\nimport { getManifestContext } from '../services/app-info';\nimport { maxSigningKeySizeInBytes } from '../utils/android-validation';\nimport { recordPWABuilderProcessStep, AnalyticsBehavior } from '../utils/analytics';\n\n@customElement('android-form')\n\nexport class AndroidForm extends AppPackageFormBase {\n  @property({ type: Boolean }) generating = false;\n  @property({ type: Boolean }) isGooglePlayApk = false;\n  @state() showAdvanced = false;\n  @state() packageOptions = emptyAndroidPackageOptions();\n  @state() manifestContext: ManifestContext | undefined = getManifestContext();\n\n  static get styles() {\n\n    const localStyles = css`\n      :host {\n        width: 100%;\n      }\n\n      #android-options-form {\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .signing-key-fields {\n        margin-left: 30px;\n      }\n\n      #signing-key-file-input {\n        border: none;\n      }\n\n      .flipper-button {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n\n      .form-generate-button {\n        width: 135px;\n        height: 40px;\n      }\n\n      .basic-settings, .adv-settings {\n        display: flex;\n        flex-direction: column;\n        gap: .75em;\n      }\n      #form-layout {\n        flex-grow: 1;\n        display: flex;\n        overflow: auto;\n        flex-direction: column;\n      }\n\n      sl-details {\n        margin-top: 1em;\n      }\n\n      sl-details::part(base){\n        border: none;\n      }\n\n      sl-details::part(summary-icon){\n        display: none;\n      }\n\n      .dropdown_icon {\n        transform: rotate(0deg);\n        transition: transform .5s;\n        height: 30px;\n      }\n\n      sl-details::part(header){\n        padding: 0 10px;\n      }\n      .details-summary {\n        display: flex;\n        align-items: center;\n        width: 100%;\n      }\n      .details-summary p {\n        margin: 0;\n        font-size: 18px;\n        font-weight: bold;\n      }\n\n      \n\n    `;\n\n    return [\n      ...super.styles,\n      localStyles\n    ];\n  }\n\n  constructor() {\n    super();\n  }\n\n  async firstUpdated() {\n    if (this.manifestContext!.isGenerated) {\n      this.manifestContext = await fetchOrCreateManifest();\n    }\n\n    this.packageOptions = createAndroidPackageOptionsFromManifest(this.manifestContext!);\n  }\n\n  protected updated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void {\n    if(_changedProperties.has(\"isGooglePlayApk\")){\n      this.packageOptions = createAndroidPackageOptionsFromManifest(this.manifestContext!);\n      if(!this.isGooglePlayApk){\n        this.packageOptions.features.locationDelegation!.enabled = false;\n        this.packageOptions.features.playBilling!.enabled = false;\n        this.packageOptions.isChromeOSOnly = false;\n        this.packageOptions.enableNotifications = false;\n        this.packageOptions.signingMode = \"none\";\n        this.packageOptions.signing = {\n                                        file: null,\n                                        alias: '',\n                                        fullName: '',\n                                        organization: '',\n                                        organizationalUnit: '',\n                                        countryCode: '',\n                                        keyPassword: '',\n                                        storePassword: ''\n                                      };\n      }\n    }\n  }\n\n  toggleSettings(settingsToggleValue: 'basic' | 'advanced') {\n    if (settingsToggleValue === 'advanced') {\n      this.showAdvanced = true;\n    } else if (settingsToggleValue === 'basic') {\n      this.showAdvanced = false;\n    } else {\n      this.showAdvanced = false;\n    }\n  }\n\n  /**\n   * Called when the user changes the signing mode.\n   */\n  androidSigningModeChanged(mode: 'mine' | 'new' | 'none') {\n    this.packageOptions.signingMode = mode;\n\n    // Reset the values as needed.\n    if (mode === 'mine' || mode === 'none') {\n      this.packageOptions.signing.alias = '';\n      this.packageOptions.signing.fullName = '';\n      this.packageOptions.signing.organization = '';\n      this.packageOptions.signing.organizationalUnit = '';\n      this.packageOptions.signing.countryCode = '';\n      this.packageOptions.signing.keyPassword = '';\n      this.packageOptions.signing.storePassword = '';\n    } else if (mode === 'new') {\n      this.packageOptions.signing.alias = 'my-key-alias';\n      this.packageOptions.signing.fullName = (this.manifestContext!.manifest.short_name || this.manifestContext!.manifest.name || 'My PWA') + ' Admin';\n      this.packageOptions.signing.organization = this.manifestContext!.manifest.name || 'PWABuilder';\n      this.packageOptions.signing.organizationalUnit = 'Engineering';\n      this.packageOptions.signing.countryCode = 'US';\n      this.packageOptions.signing.keyPassword = '';\n      this.packageOptions.signing.storePassword = '';\n      this.packageOptions.signing.file = null;\n    }\n\n    // We need to re-render because Lit isn't watching packageOptions.signing, as it's a nested object.\n    this.requestUpdate();\n  }\n\n  androidSigningKeyUploaded(event: any) {\n    const filePicker = event as HTMLInputElement;\n    if (filePicker && filePicker.files && filePicker.files.length > 0) {\n      const keyFile = filePicker.files[0];\n      // Make sure it's a reasonable size.\n      if (keyFile && keyFile.size > maxSigningKeySizeInBytes) {\n        console.error('Android signing key file is too large. Max size:', {\n          maxSize: maxSigningKeySizeInBytes,\n          fileSize: keyFile.size,\n        });\n        this.packageOptions.signingMode = 'none';\n      }\n      // Read it in as a Uint8Array and store it in our signing object.\n      const fileReader = new FileReader();\n      fileReader.onload = () => {\n        this.packageOptions.signing.file = fileReader.result as string;\n      };\n\n      fileReader.onerror = progressEvent => {\n        console.error(\n          'Unable to read Android signing key file',\n          fileReader.error,\n          progressEvent\n        );\n        this.packageOptions.signing.file = null;\n        this.packageOptions.signingMode = 'none';\n      };\n      fileReader.readAsDataURL(keyFile as Blob);\n    }\n  }\n\n  rotateZero(){\n    recordPWABuilderProcessStep(\"android_form_all_settings_expanded\", AnalyticsBehavior.ProcessCheckpoint);\n    let icon: any = this.shadowRoot!.querySelector('.dropdown_icon');\n    icon!.style.transform = \"rotate(0deg)\";\n  }\n\n  rotateNinety(){\n    recordPWABuilderProcessStep(\"android_form_all_settings_collapsed\", AnalyticsBehavior.ProcessCheckpoint);\n    let icon: any = this.shadowRoot!.querySelector('.dropdown_icon');\n    icon!.style.transform = \"rotate(90deg)\";\n  }\n\n  public getPackageOptions(): PackageOptions {\n    return this.packageOptions;\n  }\n\n  public getForm(): HTMLFormElement {\n    return this.shadowRoot!.querySelector(\"form\")!;\n  }\n\n  render() {\n    return html`\n    <div id=\"form-holder\">\n      <form\n        id=\"android-options-form\"\n        slot=\"modal-form\"\n        style=\"width: 100%\"\n      >\n        <div id=\"form-layout\">\n          <div class=\"basic-settings\">\n\n            <div class=\"form-group\">\n              ${this.renderFormInput({\n                label: 'Package ID',\n                tooltip: `The ID of your app on Google Play. Google recommends a reverse-domain style string: com.domainname.appname. Letters, numbers, periods, hyphens, and underscores are allowed.`,\n                tooltipLink: 'https://developer.android.com/guide/topics/manifest/manifest-element.html#package',\n                inputId: 'package-id-input',\n                required: true,\n                placeholder: 'MyCompany.MyApp',\n                value: this.packageOptions.packageId,\n                minLength: 3,\n                maxLength: Number.MAX_SAFE_INTEGER,\n                spellcheck: false,\n                pattern: \"[a-zA-Z0-9.-_]*$\",\n                validationErrorMessage: \"Package ID must contain only letters, numbers, periods, hyphens, and underscores.\",\n                inputHandler: (val: string) => this.packageOptions.packageId = val\n              })}\n            </div>\n\n            <div class=\"form-group\">\n              ${this.renderFormInput({\n                label: 'App name',\n                tooltip: `The full name of your app as displayed to end users`,\n                tooltipLink: 'https://support.google.com/googleplay/android-developer/answer/9859152?hl=en&visit_id=637726158830539690-3630173317&rd=1#details&zippy=%2Cproduct-details',\n                inputId: 'app-name-input',\n                required: true,\n                placeholder: 'My Awesome PWA',\n                value: this.packageOptions.name,\n                minLength: 3,\n                maxLength: 50,\n                spellcheck: false,\n                pattern: \"[^|$@#><)(!&%*]*$\",\n                validationErrorMessage:\n                  'App name must not include special characters and be between 3 and 50 characters',\n                inputHandler: (val: string) => this.packageOptions.name = val\n              })}\n            </div>\n\n            <div class=\"form-group\">\n              ${this.renderFormInput({\n                label: 'Short name',\n                tooltip: `The shorter version of your app name displayed on the Android home screen. Google recommends no more than 12 characters.`,\n                tooltipLink: 'https://developer.chrome.com/apps/manifest/name#short_name',\n                inputId: 'short-name-input',\n                required: true,\n                placeholder: 'My PWA',\n                value: this.packageOptions.launcherName,\n                minLength: 3,\n                maxLength: 30,\n                spellcheck: false,\n                validationErrorMessage: \"Short name must be between 3 and 30 characters in length. Google recommends 12 characters or fewer.\",\n                inputHandler: (val: string) => this.packageOptions.launcherName = val\n              })}\n            </div>\n          </div>\n\n          <!-- The \"all settings\" section of the options dialog -->\n          <sl-details @sl-show=${() => this.rotateNinety()} @sl-hide=${() => this.rotateZero()}>\n            <div class=\"details-summary\" slot=\"summary\">\n              <p>All Settings</p>\n              <img class=\"dropdown_icon\" src=\"/assets/new/dropdownIcon.svg\" alt=\"dropdown toggler\"/>\n            </div>\n\n              <div class=\"adv-settings\">\n                <div class=\"form-group\">\n                  ${this.renderFormInput({\n                    label: 'Version',\n                    tooltip: `The version of your app displayed to users. This is a string, typically in the form of '1.0.0.0'. Maps to android:versionName.`,\n                    tooltipLink: 'https://developer.android.com/guide/topics/manifest/manifest-element.html#vname',\n                    inputId: 'version-input',\n                    required: true,\n                    placeholder: '1.0.0.0',\n                    value: this.packageOptions.appVersion,\n                    spellcheck: false,\n                    inputHandler: (val: string) => this.packageOptions.appVersion = val\n                  })}\n                </div>\n\n                <div class=\"form-group\">\n                  ${this.renderFormInput({\n                    label: 'Version code',\n                    tooltip: `A positive integer used as an internal version number. This is not shown to users. This number is used by Google Play to determine whether one version is more recent than another, with higher numbers indicating more recent versions. Maps to android:versionCode.`,\n                    tooltipLink: 'https://developer.android.com/guide/topics/manifest/manifest-element.html#vcode',\n                    inputId: 'version-code-input',\n                    type: 'number',\n                    minValue: 1,\n                    maxValue: 2100000000,\n                    required: true,\n                    placeholder: '1',\n                    value: this.packageOptions.appVersionCode.toString(),\n                    inputHandler: (val: string) => this.packageOptions.appVersionCode = parseInt(val, 10)\n                  })}\n                </div>\n\n                <div class=\"form-group\">\n                  ${this.renderFormInput({\n                    label: 'Host',\n                    tooltip: `The host portion of your PWA's URL. For example, mypwa.com`,\n                    inputId: 'host-input',\n                    required: true,\n                    placeholder: 'mypwa.com',\n                    value: this.packageOptions.host,\n                    minLength: 3,\n                    spellcheck: false,\n                    inputHandler: (val: string) => this.packageOptions.host = val\n                  })}\n                </div>\n\n                <div class=\"form-group\">\n                  ${this.renderFormInput({\n                    label: 'Start URL',\n                    tooltip: `The start path for your PWA. Must be relative to the Host URL. If Host URL contains your PWA, you can use '/' to specify a default`,\n                    tooltipLink: 'https://developer.mozilla.org/en-US/docs/Web/Manifest/start_url',\n                    inputId: 'start-url-input',\n                    required: true,\n                    placeholder: '/index.html',\n                    value: this.packageOptions.startUrl,\n                    spellcheck: false,\n                    validationErrorMessage: \"You must specify a relative start URL. If you don't have a start URL, use '/'\",\n                    inputHandler: (val: string) => this.packageOptions.startUrl = val\n                  })}\n                </div>\n\n                <div class=\"form-group\">\n                  ${this.renderFormInput({\n                    label: 'Theme color',\n                    tooltip: `The theme color used for the Android status bar in your app. Typically, this should be set to your manifest's theme_color.`,\n                    inputId: 'theme-color-input',\n                    type: 'color',\n                    value: this.packageOptions.themeColor,\n                    inputHandler: (val: string) => this.packageOptions.themeColor = val\n                  })}\n                </div>\n\n                <div class=\"form-group\">\n                  ${this.renderFormInput({\n                    label: 'Background color',\n                    tooltip: `The background color to use for your app's splash screen. Typically this is set to your manifest's background_color.`,\n                    inputId: 'background-color-input',\n                    type: 'color',\n                    value: this.packageOptions.backgroundColor,\n                    inputHandler: (val: string) => this.packageOptions.backgroundColor = val\n                  })}\n                </div>\n\n                <div class=\"form-group\">\n                  ${this.renderFormInput({\n                    label: 'Nav color',\n                    tooltip: `The color of the Android navigation bar in your app. Typically this is set to your manifest's theme_color`,\n                    inputId: 'nav-color-input',\n                    type: 'color',\n                    value: this.packageOptions.navigationColor,\n                    inputHandler: (val: string) => this.packageOptions.navigationColor = val\n                  })}\n                </div>\n\n                <div class=\"form-group\">\n                  ${this.renderFormInput({\n                    label: 'Nav dark color',\n                    tooltip: `The color of the Android navigation bar in your app when the Android device is in dark mode.`,\n                    inputId: 'nav-dark-color-input',\n                    type: 'color',\n                    value: this.packageOptions.navigationColorDark,\n                    inputHandler: (val: string) => this.packageOptions.navigationColorDark = val\n                  })}\n                </div>\n\n                <div class=\"form-group\">\n                  ${this.renderFormInput({\n                    label: 'Nav divider color',\n                    tooltip: `The color of the Android navigation bar divider in your app.`,\n                    inputId: 'nav-divider-color-input',\n                    type: 'color',\n                    value: this.packageOptions.navigationDividerColor,\n                    inputHandler: (val: string) => this.packageOptions.navigationDividerColor = val\n                  })}\n                </div>\n\n                <div class=\"form-group\">\n                  ${this.renderFormInput({\n                    label: 'Nav divider dark color',\n                    tooltip: `The color of the Android navigation bar divider in your app when the Android device is in dark mode.`,\n                    inputId: 'nav-divider-dark-color-input',\n                    type: 'color',\n                    value: this.packageOptions.navigationDividerColorDark,\n                    inputHandler: (val: string) => this.packageOptions.navigationDividerColorDark = val\n                  })}\n                </div>\n\n                <div class=\"form-group\">\n                  ${this.renderFormInput({\n                    label: 'Icon URL',\n                    tooltip: `The URL to a square PNG image to use for your app's icon. Can be absolute or relative to your manifest. Google recommends a 512x512 PNG without shadows.`,\n                    tooltipLink: 'https://developer.android.com/distribute/google-play/resources/icon-design-specifications',\n                    inputId: 'icon-url-input',\n                    required: true,\n                    spellcheck: false,\n                    value: this.packageOptions.iconUrl,\n                    placeholder: '/icons/512x512.png',\n                    inputHandler: (val: string) => this.packageOptions.iconUrl = val\n                  })}\n                </div>\n\n                <div class=\"form-group\">\n                  ${this.renderFormInput({\n                    label: 'Maskable icon URL',\n                    tooltip: `Optional. The URL to a PNG image with a minimum safe zone of trimmable padding, enabling rounded icons on certain Android versions. Google recommends a 512x512 PNG without shadows.`,\n                    tooltipLink: 'https://web.dev/maskable-icon',\n                    inputId: 'maskable-icon-url-input',\n                    spellcheck: false,\n                    value: this.packageOptions.maskableIconUrl || '',\n                    placeholder: '/icons/512x512-maskable.png',\n                    inputHandler: (val: string) => this.packageOptions.maskableIconUrl = val\n                  })}\n                </div>\n\n                <div class=\"form-group\">\n                  ${this.renderFormInput({\n                    label: 'Monochrome icon URL',\n                    tooltip: `Optional. The URL to a PNG image containing only white and black colors, enabling Android to fill the icon with user-specified color or\n                    gradient depending on theme, color mode, or Android ontrast settings.`,\n                    tooltipLink: 'https://w3c.github.io/manifest/#monochrome-icons-and-solid-fills',\n                    inputId: 'monochrome-icon-url-input',\n                    spellcheck: false,\n                    value: this.packageOptions.monochromeIconUrl || '',\n                    placeholder: '/icons/512x512-monochrome.png',\n                    inputHandler: (val: string) => this.packageOptions.monochromeIconUrl = val\n                  })}\n                </div>\n\n                <div class=\"form-group\">\n                  ${this.renderFormInput({\n                    label: 'Manifest URL',\n                    tooltip: `The absolute URL of your web manifest.`,\n                    inputId: 'manifest-url-input',\n                    type: 'url',\n                    value: this.packageOptions.webManifestUrl,\n                    placeholder: 'https://myawesomepwa.com/manifest.json',\n                    inputHandler: (val: string) => this.packageOptions.webManifestUrl = val\n                  })}\n                </div>\n\n                <div class=\"form-group\">\n                  ${this.renderFormInput({\n                    label: 'Splash fade out duration (ms)',\n                    tooltip: `How long the splash screen fade out animation should last in milliseconds.`,\n                    inputId: 'splash-fade-out-input',\n                    type: 'number',\n                    value: (this.packageOptions.splashScreenFadeOutDuration || 0).toString(),\n                    placeholder: '300',\n                    inputHandler: (val: string) => this.packageOptions.splashScreenFadeOutDuration = parseInt(val, 10)\n                  })}\n                </div>\n\n                <div class=\"form-group\">\n                  <label>${localeStrings.text.android.titles.fallback}</label>\n                  <div class=\"form-check\">\n                    ${this.renderFormInput({\n                      label: 'Custom Tabs',\n                      tooltip: `When Trusted Web Activity (TWA) is unavailable, use Chrome Custom Tabs as a fallback to run your app.`,\n                      tooltipLink: 'https://developer.chrome.com/docs/android/custom-tabs/',\n                      inputId: 'chrome-custom-tab-fallback-input',\n                      type: 'radio',\n                      name: 'fallbackType',\n                      value: 'customtabs',\n                      checked: this.packageOptions.fallbackType === 'customtabs',\n                      inputHandler: () => this.packageOptions.fallbackType = 'customtabs'\n                    })}\n                  </div>\n                  <div class=\"form-check\">\n                    ${this.renderFormInput({\n                      label: 'Web View',\n                      tooltip: `When Trusted Web Activity (TWA) is unavailable, use a web view as a fallback to run your app.`,\n                      tooltipLink: 'https://developer.chrome.com/docs/android/custom-tabs/',\n                      inputId: 'web-view-fallback-input',\n                      type: 'radio',\n                      name: 'fallbackType',\n                      value: 'webview',\n                      checked: this.packageOptions.fallbackType === 'webview',\n                      inputHandler: () => this.packageOptions.fallbackType = 'webview'\n                    })}\n                  </div>\n                </div>\n\n                <div class=\"form-group\">\n                  <label>${localeStrings.text.android.titles.display_mode}</label>\n                  <div class=\"form-check\">\n                    ${this.renderFormInput({\n                      label: 'Standalone',\n                      tooltip: 'Recommended for most apps. The Android status bar and navigation bar will be shown while your app is running.',\n                      tooltipLink: 'https://developer.android.com/training/system-ui/immersive',\n                      inputId: 'display-standalone-input',\n                      type: 'radio',\n                      name: 'displayMode',\n                      value: 'standalone',\n                      checked: this.packageOptions.display === 'standalone',\n                      inputHandler: () => this.packageOptions.display = 'standalone'\n                    })}\n                  </div>\n                  <div class=\"form-check\">\n                    ${this.renderFormInput({\n                      label: 'Fullscreen',\n                      tooltip: `The Android status bar and navigation bar will be hidden while your app is running. Suitable for immersive experiences such as games or media apps.`,\n                      tooltipLink: 'https://developer.android.com/training/system-ui/immersive#immersive',\n                      inputId: 'display-fullscreen-input',\n                      type: 'radio',\n                      name: 'displayMode',\n                      value: 'fullscreen',\n                      checked: this.packageOptions.display === 'fullscreen',\n                      inputHandler: () => this.packageOptions.display = 'fullscreen'\n                    })}\n                  </div>\n                  <div class=\"form-check\">\n                    ${this.renderFormInput({\n                      label: 'Fullscreen sticky',\n                      tooltip: `The Android status bar and navigation bar will be hidden while your app is running, and if the user swipes from the edge of the Android device, the system bars will be semi-transparent, and the touch gesture will be passed to your app. Recommended for drawing apps, and games that require lots of swiping.`,\n                      tooltipLink: 'https://developer.android.com/training/system-ui/immersive#sticky-immersive',\n                      inputId: 'display-fullscreen-sticky-input',\n                      type: 'radio',\n                      name: 'displayMode',\n                      value: 'fullscreen-sticky',\n                      checked: this.packageOptions.display === 'fullscreen-sticky',\n                      inputHandler: () => this.packageOptions.display = 'fullscreen-sticky'\n                    })}\n                  </div>\n                </div>\n\n                ${this.isGooglePlayApk ?\n                html`\n                <div class=\"form-group\">\n                  <label>${localeStrings.text.android.titles.notification}</label>\n                  <div class=\"form-check\">\n                    ${this.renderFormInput({\n                      label: 'Enable',\n                      tooltip: `If enabled, your PWA can send push notifications without browser permission prompts.`,\n                      tooltipLink: 'https://github.com/GoogleChromeLabs/svgomg-twa/issues/60',\n                      inputId: 'notification-delegation-input',\n                      type: 'checkbox',\n                      checked: this.packageOptions.enableNotifications === true,\n                      inputHandler: (_, checked) => this.packageOptions.enableNotifications = checked\n                    })}\n                  </div>\n                </div>` : html``}\n\n                ${this.isGooglePlayApk ?\n                html`\n                <div class=\"form-group\">\n                  <label\n                    >${localeStrings.text.android.titles\n                      .location_delegation}</label\n                  >\n                  <div class=\"form-check\">\n                    ${this.renderFormInput({\n                      label: 'Enable',\n                      tooltip: 'If enabled, your PWA can access navigator.geolocation without browser permission prompts.',\n                      inputId: 'location-delegation-input',\n                      type: 'checkbox',\n                      checked: this.packageOptions.features.locationDelegation?.enabled === true,\n                      inputHandler: (_, checked) => this.packageOptions.features.locationDelegation!.enabled = checked\n                    })}\n                  </div>\n                </div>` : html``}\n\n                ${this.isGooglePlayApk ?\n                html`\n                <div class=\"form-group\">\n                  <label\n                    >${localeStrings.text.android.titles\n                      .google_play_billing}</label\n                  >\n                  <div class=\"form-check\">\n                    ${this.renderFormInput({\n                      label: 'Enable',\n                      tooltip: 'If enabled, your PWA can sell in-app purchases and subscriptions via the Digital Goods API.',\n                      tooltipLink: 'https://developer.chrome.com/docs/android/trusted-web-activity/receive-payments-play-billing/',\n                      inputId: 'google-play-billing-input',\n                      type: 'checkbox',\n                      checked: this.packageOptions.features.playBilling?.enabled === true,\n                      inputHandler: (_, checked) => this.packageOptions.features.playBilling!.enabled = checked\n                    })}\n                  </div>\n                </div>` : html``}\n\n                <div class=\"form-group\">\n                  <label>\n                    ${localeStrings.text.android.titles.settings_shortcut}\n                  </label>\n                  <div class=\"form-check\">\n                    ${this.renderFormInput({\n                      label: 'Enable',\n                      tooltip: 'If enabled, users can long-press on your app tile and a Settings menu item will appear, letting users manage space for your app.',\n                      tooltipLink: 'https://github.com/pwa-builder/PWABuilder/issues/1113',\n                      inputId: 'site-settings-shortcut-input',\n                      type: 'checkbox',\n                      checked: this.packageOptions.enableSiteSettingsShortcut === true,\n                      inputHandler: (_, checked) => this.packageOptions.enableSiteSettingsShortcut = checked\n                    })}\n                  </div>\n                </div>\n\n                ${this.isGooglePlayApk ?\n                html`\n                <div class=\"form-group\">\n                  <label>\n                    ${localeStrings.text.android.titles.chromeos_only}\n                  </label>\n                  <div class=\"form-check\">\n                    ${this.renderFormInput({\n                      label: 'Enable',\n                      tooltip: 'If enabled, your Android package will only run on ChromeOS devices.',\n                      inputId: 'chromeos-only-input',\n                      type: 'checkbox',\n                      checked: this.packageOptions.isChromeOSOnly === true,\n                      inputHandler: (_, checked) => this.packageOptions.isChromeOSOnly = checked\n                    })}\n                  </div>\n                </div>` : html``}\n\n                <div class=\"form-group\">\n                  <label>${localeStrings.text.android.titles.source_code}</label>\n                  <div class=\"form-check\">\n                    ${this.renderFormInput({\n                      label: 'Enable',\n                      tooltip: 'If enabled, your download will include the source code for your Android app.',\n                      inputId: 'include-src-input',\n                      type: 'checkbox',\n                      checked: this.packageOptions.includeSourceCode === true,\n                      inputHandler: (_, checked) => this.packageOptions.includeSourceCode = checked\n                    })}\n                  </div>\n                </div>\n\n                ${this.isGooglePlayApk ?\n                html`\n                <div class=\"form-group\">\n                  <label>${localeStrings.text.android.titles.signing_key}</label>\n                  <div class=\"form-check\">\n                    ${this.renderFormInput({\n                      label: 'New',\n                      tooltip: `Recommended for new apps in Google Play. PWABuilder will generate a new signing key for you and sign your package with it. Your download will contain the new signing details.`,\n                      inputId: 'signing-new-input',\n                      name: 'signingMode',\n                      value: 'new',\n                      type: 'radio',\n                      checked: this.packageOptions.signingMode === 'new',\n                      inputHandler: () => this.androidSigningModeChanged('new')\n                    })}\n                  </div>\n                  <div class=\"form-check\">\n                    ${this.renderFormInput({\n                      label: 'Use mine',\n                      tooltip: 'Recommended for existing apps in Google Play. Use this option if you already have a signing key and you want to publish a new version of an existing app in Google Play.',\n                      inputId: 'signing-mine-input',\n                      name: 'signingMode',\n                      value: 'mine',\n                      type: 'radio',\n                      checked: this.packageOptions.signingMode === 'mine',\n                      inputHandler: () => this.androidSigningModeChanged('mine')\n                    })}\n                  </div>\n                  <div class=\"form-check\">\n                    ${this.renderFormInput({\n                      label: 'None',\n                      tooltip: 'PWABuilder will generate a raw, unsigned APK. Raw, unsigned APKs cannot be uploaded to the Google Play Store.',\n                      inputId: 'signing-none-input',\n                      name: 'signingMode',\n                      value: 'none',\n                      type: 'radio',\n                      checked: this.packageOptions.signingMode === 'none',\n                      inputHandler: () => this.androidSigningModeChanged('none')\n                    })}\n                  </div>\n                </div>\n\n                ${this.renderSigningKeyFields()}` :\n                html``}\n\n              </div>\n          </sl-details>\n        </div>\n      </form>\n      \n    </div>\n    </div>\n    `;\n  }\n\n  renderSigningKeyFields(): TemplateResult {\n    if (this.packageOptions.signingMode === 'new') {\n      return this.renderNewSigningKeyFields();\n    }\n\n    if (this.packageOptions.signingMode === 'mine') {\n      return this.renderExistingSigningKeyFields();\n    }\n\n    // Otherwise, nothing to render.\n    return html``;\n  }\n\n  renderNewSigningKeyFields(): TemplateResult {\n    return html`\n      <div class=\"signing-key-fields\">\n        <div class=\"form-group\">\n          ${this.renderKeyAlias()}\n        </div>\n\n        <div class=\"form-group\">\n          ${this.renderFormInput({\n            label: 'Key full name',\n            tooltip: `Your full name. Used when create the new signing key.`,\n            tooltipLink: 'https://developer.android.com/studio/publish/app-signing',\n            inputId: 'key-full-name-input',\n            required: true,\n            placeholder: 'John Doe',\n            value: this.packageOptions.signing.fullName || '',\n            spellcheck: false,\n            inputHandler: (val: string) => this.packageOptions.signing.fullName = val\n          })}\n        </div>\n\n        <div class=\"form-group\">\n          ${this.renderFormInput({\n            label: 'Key organization',\n            tooltip: `The name of your company or organization. Used as the organization of the new signing key.`,\n            tooltipLink: 'https://developer.android.com/studio/publish/app-signing',\n            inputId: 'key-org-input',\n            required: true,\n            placeholder: 'My Company',\n            value: this.packageOptions.signing.organization || '',\n            spellcheck: false,\n            inputHandler: (val: string) => this.packageOptions.signing.organization = val\n          })}\n        </div>\n\n        <div class=\"form-group\">\n          ${this.renderFormInput({\n            label: 'Key organizational unit',\n            tooltip: `The department you work in, e.g. \"Engineering\". Used as the organizational unit of the new signing key.`,\n            tooltipLink: 'https://developer.android.com/studio/publish/app-signing',\n            inputId: 'key-org-unit-input',\n            required: true,\n            placeholder: 'Engineering Department',\n            value: this.packageOptions.signing.organizationalUnit,\n            spellcheck: false,\n            inputHandler: (val: string) => this.packageOptions.signing.organizationalUnit = val\n          })}\n        </div>\n\n        <div class=\"form-group\">\n          ${this.renderFormInput({\n            label: 'Key country code',\n            tooltip: `Your country's 2 letter code (e.g. \"US\"). Used as the country of the new signing key.`,\n            tooltipLink: 'https://developer.android.com/studio/publish/app-signing',\n            inputId: 'key-country-code-input',\n            required: true,\n            placeholder: 'US',\n            value: this.packageOptions.signing.countryCode,\n            spellcheck: false,\n            minLength: 2,\n            maxLength: 2,\n            validationErrorMessage: 'Country code must be 2 characters in length',\n            inputHandler: (val: string) => this.packageOptions.signing.countryCode = val\n          })}\n        </div>\n      </div>\n    `;\n  }\n\n  renderExistingSigningKeyFields(): TemplateResult {\n    return html`\n      <div class=\"signing-key-fields\">\n        <div class=\"form-group\">\n          <label for=\"signing-key-file-input\">Key file</label>\n          <input\n            type=\"file\"\n            class=\"form-control\"\n            id=\"signing-key-file-input\"\n            @change=\"${(e: Event) =>\n              this.androidSigningKeyUploaded(e.target)}\"\n            accept=\".keystore\"\n            required\n          />\n        </div>\n        ${this.renderKeyAlias()}\n        ${this.renderKeyPassword()}\n        ${this.renderKeyStorePassword()}\n      </div>\n    `;\n  }\n\n  renderKeyAlias(): TemplateResult {\n    const tooltip = this.packageOptions.signingMode === 'new' ?\n      'The alias to use in the new signing key.' :\n      'The alias of your existing signing key.'\n    return html`\n      <div class=\"form-group\">\n        ${this.renderFormInput({\n          label: 'Key alias',\n          tooltip: tooltip,\n          tooltipLink: 'https://developer.android.com/studio/publish/app-signing',\n          inputId: 'key-alias-input',\n          required: true,\n          placeholder: 'my-key-alias',\n          value: this.packageOptions.signing.alias || '',\n          spellcheck: false,\n          inputHandler: (val: string) => this.packageOptions.signing.alias = val\n        })}\n      </div>\n    `;\n  }\n\n  renderKeyPassword(): TemplateResult {\n    const tooltip = this.packageOptions.signingMode === 'new' ?\n      'The password to use for the new signing key. Leave blank to let PWABuilder generate a strong password for you.' :\n      'Your existing key password'\n    return html`\n      <div class=\"form-group\">\n        ${this.renderFormInput({\n          label: 'Key password',\n          tooltip: tooltip,\n          tooltipLink: 'https://developer.android.com/studio/publish/app-signing',\n          inputId: 'key-password-input',\n          type: 'password',\n          minLength: 6,\n          required: this.packageOptions.signingMode === 'mine',\n          value: this.packageOptions.signing.keyPassword,\n          inputHandler: (val: string) => this.packageOptions.signing.keyPassword = val\n        })}\n      </div>\n    `;\n  }\n\n  renderKeyStorePassword(): TemplateResult {\n    const tooltip = this.packageOptions.signingMode === 'new' ?\n      'The key store password to use in the new signing key. Leave blank to let PWABuilder generate a strong key store password for you.' :\n      'Your existing key store password'\n    return html`\n      <div class=\"form-group\">\n        ${this.renderFormInput({\n          label: 'Key store password',\n          tooltip: tooltip,\n          tooltipLink: 'https://developer.android.com/studio/publish/app-signing',\n          inputId: 'key-store-password-input',\n          type: 'password',\n          minLength: 6,\n          required: this.packageOptions.signingMode === 'mine',\n          value: this.packageOptions.signing.storePassword,\n          inputHandler: (val: string) => this.packageOptions.signing.storePassword = val\n        })}\n      </div>\n    `;\n  }\n}","import { css, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { fetchOrCreateManifest } from '../services/manifest';\nimport { AppPackageFormBase } from './app-package-form-base';\nimport { createIOSPackageOptionsFromManifest, emptyIOSPackageOptions } from '../services/publish/ios-publish';\nimport { getManifestContext } from '../services/app-info';\nimport { AnalyticsBehavior, recordPWABuilderProcessStep } from '../utils/analytics';\nimport { ManifestContext, PackageOptions } from '../utils/interfaces';\n\n@customElement('ios-form')\n\nexport class IOSForm extends AppPackageFormBase {\n  @property({ type: Boolean }) generating: boolean = false;\n  @state() showAllSettings = false;\n  @state() packageOptions = emptyIOSPackageOptions();\n\n  static get styles() {\n    const localStyles = css`\n\n      #ios-options-form {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n      }\n       .flipper-button {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n\n      .form-generate-button {\n        width: 135px;\n        height: 40px;\n      }\n\n      .basic-settings, .adv-settings {\n        display: flex;\n        flex-direction: column;\n        gap: .75em;\n      }\n\n      #form-layout {\n        flex-grow: 1;\n        display: flex;\n        overflow: auto;\n        flex-direction: column;\n        height: 54vh;\n      }\n\n      sl-details {\n        margin-top: 1em;\n      }\n\n      sl-details::part(base){\n        border: none;\n      }\n\n      sl-details::part(summary-icon){\n        display: none;\n      }\n\n      .dropdown_icon {\n        transform: rotate(0deg);\n        transition: transform .5s;\n        height: 30px;\n      }\n\n      sl-details::part(header){\n        padding: 0 10px;\n      }\n\n      .details-summary {\n        display: flex;\n        align-items: center;\n        width: 100%;\n      }\n\n      .details-summary p {\n        margin: 0;\n        font-size: 18px;\n        font-weight: bold;\n      }\n\n      #form-holder{\n          display: flex;\n          flex-direction: column;\n          border-radius: 10px;\n          justify-content: spacve-between;\n          height: 100%;\n        }\n\n\n\n    `;\n    return [\n      ...super.styles,\n      localStyles\n    ];\n  }\n\n  constructor() {\n    super();\n  }\n\n  async firstUpdated() {\n    let manifestContext: ManifestContext | undefined = getManifestContext();\n    if (manifestContext.isGenerated) {\n      manifestContext = await fetchOrCreateManifest();\n    }\n\n    this.packageOptions = createIOSPackageOptionsFromManifest(manifestContext!);\n  }\n\n  rotateZero(){\n    recordPWABuilderProcessStep(\"ios_form_all_settings_expanded\", AnalyticsBehavior.ProcessCheckpoint);\n    let icon: any = this.shadowRoot!.querySelector('.dropdown_icon');\n    icon!.style.transform = \"rotate(0deg)\";\n  }\n\n  rotateNinety(){\n    recordPWABuilderProcessStep(\"ios_form_all_settings_collapsed\", AnalyticsBehavior.ProcessCheckpoint);\n    let icon: any = this.shadowRoot!.querySelector('.dropdown_icon');\n    icon!.style.transform = \"rotate(90deg)\";\n  }\n\n  public getPackageOptions(): PackageOptions {\n    return this.packageOptions;\n  }\n\n  public getForm(): HTMLFormElement {\n    return this.shadowRoot!.querySelector(\"form\")!;\n  }\n\n  render() {\n    return html`\n    <div id=\"form-holder\">\n      <form\n        id=\"ios-options-form\"\n        slot=\"modal-form\"\n        style=\"width: 100%\"\n        title=\"\"\n      >\n        <div id=\"form-layout\">\n          <div class=\"basic-settings\">\n            <div class=\"form-group\">\n              ${super.renderFormInput({\n                label: 'Bundle ID',\n                tooltip: `The unique identifier of your app. Apple recommends a reverse-domain style string: com.domainname.appname. You'll need this value when uploading your app to the App Store.`,\n                tooltipLink: \"https://blog.pwabuilder.com/docs/publish-your-pwa-to-the-ios-app-store/#create-your-bundle-id\",\n                inputId: 'bundleIdInput',\n                value: this.packageOptions.bundleId || 'com.domainname.appname',\n                required: true,\n                placeholder: \"com.domainname.appname\",\n                minLength: 3,\n                spellcheck: false,\n                inputHandler: (val: string) => this.packageOptions.bundleId = val\n              })}\n            </div>\n\n            <div class=\"form-group\">\n              ${this.renderFormInput({\n                label: 'App name',\n                tooltip: `The name of your app as displayed to users`,\n                tooltipLink: \"https://blog.pwabuilder.com/docs/publish-your-pwa-to-the-ios-app-store\",\n                inputId: 'appNameInput',\n                placeholder: 'My PWA',\n                value: this.packageOptions.name || 'My PWA',\n                required: true,\n                spellcheck: false,\n                minLength: 3,\n                pattern: \"[^|$@#><)(!&%*]*$\",\n                // pattern: // NOTE: avoid using a regex pattern here, as it often has unintended consequences, such as blocking non-English names\n                inputHandler: (val: string) => this.packageOptions.name = val\n              })}\n            </div>\n\n            <div class=\"form-group\">\n              ${this.renderFormInput({\n                label: 'URL',\n                inputId: 'urlInput',\n                placeholder: 'https://domainname.com/app',\n                value: this.packageOptions.url,\n                required: true,\n                type: 'url',\n                inputHandler: (val: string) => this.packageOptions.url = val\n              })}\n            </div>\n          </div>\n\n          <sl-details @sl-show=${() => this.rotateNinety()} @sl-hide=${() => this.rotateZero()}>\n            <div class=\"details-summary\" slot=\"summary\">\n              <p>All Settings</p>\n              <img class=\"dropdown_icon\" src=\"/assets/new/dropdownIcon.svg\" alt=\"dropdown toggler\"/>\n            </div>\n            <div class=\"adv-settings\">\n              <div>\n                <div class=\"\">\n                  <div class=\"form-group\">\n                    ${this.renderFormInput({\n                      label: 'Image URL',\n                      inputId: 'imageUrlInput',\n                      tooltip: `The URL of a square 512x512 or larger PNG image from which to generate your iOS app icons. This can be an absolute URL or a URL relative to your web manifest.`,\n                      placeholder: '/images/512x512.png',\n                      value: this.packageOptions.imageUrl,\n                      required: true,\n                      inputHandler: (val: string) => this.packageOptions.imageUrl = val\n                    })}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"form-group\">\n              ${this.renderFormInput({\n                  label: 'Status bar color',\n                  inputId: 'statusBarColorInput',\n                  tooltip: `The background color of the iOS status bar while your app is running. We recommend using your manifest's theme_color or background_color.`,\n                  type: 'color',\n                  placeholder: '#ffffff',\n                  value: this.packageOptions.statusBarColor,\n                  required: true,\n                  inputHandler: (val: string) => this.packageOptions.statusBarColor = val\n                })}\n            </div>\n\n            <div class=\"form-group\">\n              ${this.renderFormInput({\n                  label: 'Splash screen color',\n                  inputId: 'splashColorInput',\n                  tooltip: `The background color of the splash screen shown while your PWA is launching. We recommend using your manifest's background_color.`,\n                  type: 'color',\n                  placeholder: '#ffffff',\n                  value: this.packageOptions.splashColor,\n                  required: true,\n                  inputHandler: (val: string) => this.packageOptions.splashColor = val\n                })}\n            </div>\n\n            <div class=\"form-group\">\n              ${this.renderFormInput({\n                  label: 'Progress bar color',\n                  inputId: 'progressBarColorInput',\n                  tooltip: `The color of the progress bar shown on your app's splash screen while your PWA is loaded. We recommend using your manifest's theme_color.`,\n                  type: 'color',\n                  placeholder: '#000000',\n                  value: this.packageOptions.progressBarColor,\n                  required: true,\n                  inputHandler: (val: string) => this.packageOptions.progressBarColor = val\n                })}\n            </div>\n\n            <div class=\"form-group\">\n              ${this.renderFormInput({\n                  label: 'Permitted URLs',\n                  inputId: 'permittedUrlsInput',\n                  tooltip: `Optional. A comma-separated list of URLs or hosts that your PWA should be allowed to navigate to. You don't need to add your PWA's domain, as it's automatically included.`,\n                  placeholder: 'account.google.com, login.microsoft.com',\n                  value: this.packageOptions.permittedUrls.join(', '),\n                  inputHandler: (val: string) => this.packageOptions.permittedUrls = val.split(',').map(i => i.trim()).filter(i => !!i)\n                })}\n            </div>\n            </sl-details>\n        </div>\n      </form>\n    </div>\n    `;\n  }\n\n  getInputValue(target: EventTarget | null): string {\n    const input = target as HTMLInputElement | null;\n    return input?.value || \"\";\n  }\n}\n","import { css, html, TemplateResult } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { fetchOrCreateManifest } from '../services/manifest';\nimport { AppPackageFormBase } from './app-package-form-base';\nimport {\n  createOculusPackageOptionsFromManifest,\n  emptyOculusPackageOptions,\n  emptyOculusSigningKey,\n} from '../services/publish/oculus-publish';\nimport { getManifestContext } from '../services/app-info';\nimport { SigningMode } from '../utils/oculus-validation';\nimport { maxSigningKeySizeInBytes } from '../utils/android-validation';\nimport { recordPWABuilderProcessStep, AnalyticsBehavior } from '../utils/analytics';\nimport { ManifestContext, PackageOptions } from '../utils/interfaces';\n\n@customElement('oculus-form')\n\nexport class OculusForm extends AppPackageFormBase {\n  @property({ type: Boolean }) generating: boolean = false;\n  @state() showAllSettings = false;\n  @state() packageOptions = emptyOculusPackageOptions();\n  @state() existingSigningKey = emptyOculusSigningKey();\n\n  static get styles() {\n    const localStyles = css`\n\n      #oculus-options-form {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .basic-settings, .adv-settings {\n        display: flex;\n        flex-direction: column;\n        gap: .75em;\n      }\n\n      #form-layout {\n        flex-grow: 1;\n        display: flex;\n        overflow: auto;\n        flex-direction: column;\n        height: 54vh;\n      }\n\n      sl-details {\n        margin-top: 1em;\n      }\n\n      sl-details::part(base){\n        border: none;\n      }\n\n      sl-details::part(summary-icon){\n        display: none;\n      }\n\n      .dropdown_icon {\n        transform: rotate(0deg);\n        transition: transform .5s;\n        height: 30px;\n      }\n\n      #generate-submit::part(base) {\n        background-color: black;\n        color: white;\n        font-size: 14px;\n        height: 3em;\n        width: 100%;\n        border-radius: 50px;\n      }\n\n      sl-details::part(header){\n        padding: 0 10px;\n      }\n\n      .details-summary {\n        display: flex;\n        align-items: center;\n        width: 100%;\n      }\n\n      .details-summary p {\n        margin: 0;\n        font-size: 18px;\n        font-weight: bold;\n      }\n\n      #form-holder{\n        display: flex;\n        flex-direction: column;\n        border-radius: 10px;\n        justify-content: spacve-between;\n        height: 100%;\n      }\n\n      sl-button::part(label){\n        font-size: 16px;\n        padding: .5em 2em;\n      }\n\n      .arrow_link {\n        display: flex;\n        align-items: center;\n        justify-content: flex-start;\n        font-weight: bold;\n        margin-bottom: .25em;\n        font-size: 14px;\n      }\n      .arrow_link a {\n        text-decoration: none;\n        border-bottom: 1px solid rgb(79, 63, 182);\n        font-size: 1em;\n        font-weight: bold;\n        margin: 0px 0.5em 0px 0px;\n        line-height: 1em;\n        color: rgb(79, 63, 182);\n      }\n      .arrow_link a:visited {\n        color: #4F3FB6;\n      }\n      .arrow_link:hover {\n        cursor: pointer;\n      }\n      .arrow_link:hover img {\n        animation: bounce 1s;\n      }\n\n      @keyframes bounce {\n        0%, 20%, 50%, 80%, 100% {\n            transform: translateY(0);\n        }\n        40% {\n          transform: translateX(-5px);\n        }\n        60% {\n            transform: translateX(5px);\n        }\n      }\n\n      #tou-link{\n        color: 757575;\n        font-size: 14px;\n      }\n\n      @media(max-width: 640px){\n        #form-extras {\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          gap: 1em;\n        }\n        #form-details-block {\n          flex-direction: column;\n          gap: .75em;\n          align-items: center;\n          text-align: center;\n          width: 100%;\n        }\n        #form-options-actions {\n          flex-direction: column;\n        }\n      }\n        `;\n    return [...super.styles, localStyles];\n  }\n\n  constructor() {\n    super();\n  }\n\n  async firstUpdated() {\n    let manifestContext: ManifestContext | undefined = getManifestContext();\n    if (manifestContext.isGenerated) {\n      manifestContext = await fetchOrCreateManifest();\n    }\n\n    this.packageOptions =\n      createOculusPackageOptionsFromManifest(manifestContext!);\n  }\n\n  rotateZero(){\n    recordPWABuilderProcessStep(\"meta_form_all_settings_expanded\", AnalyticsBehavior.ProcessCheckpoint);\n    let icon: any = this.shadowRoot!.querySelector('.dropdown_icon');\n    icon!.style.transform = \"rotate(0deg)\";\n  }\n\n  rotateNinety(){\n    recordPWABuilderProcessStep(\"meta_form_all_settings_collapsed\", AnalyticsBehavior.ProcessCheckpoint);\n    let icon: any = this.shadowRoot!.querySelector('.dropdown_icon');\n    icon!.style.transform = \"rotate(90deg)\";\n  }\n\n  public getPackageOptions(): PackageOptions {\n    return this.packageOptions;\n  }\n\n  public getForm(): HTMLFormElement {\n    return this.shadowRoot!.querySelector(\"form\")!;\n  }\n\n  render() {\n    return html`\n    <div id=\"form-holder\">\n      <form\n        id=\"oculus-options-form\"\n        slot=\"modal-form\"\n        style=\"width: 100%\"\n        title=\"\"\n      >\n        <div id=\"form-layout\">\n          <div class=\"basic-settings\">\n            <div class=\"form-group\">\n              ${this.renderFormInput({\n                label: 'Package ID',\n                tooltip: `The ID of your Meta Quest app. We recommend a reverse-domain style string: com.domainname.appname. Letters, numbers, periods, hyphens, and underscores are allowed.`,\n                tooltipLink:\n                  'https://developer.android.com/guide/topics/manifest/manifest-element.html#package',\n                inputId: 'package-id-input',\n                required: true,\n                placeholder: 'MyCompany.MyApp',\n                value: this.packageOptions.packageId,\n                minLength: 3,\n                maxLength: 50,\n                spellcheck: false,\n                pattern: '[a-zA-Z0-9.-_]*$',\n                validationErrorMessage:\n                  'Package ID must contain only letters, numbers, periods, hyphens, and underscores.',\n                inputHandler: (val: string) =>\n                  (this.packageOptions.packageId = val),\n              })}\n            </div>\n\n            <div class=\"form-group\">\n              ${this.renderFormInput({\n                label: 'App name',\n                tooltip: `The name of your app as displayed to users`,\n                inputId: 'appNameInput',\n                placeholder: 'My PWA',\n                value: this.packageOptions.name || 'My PWA',\n                required: true,\n                spellcheck: false,\n                minLength:  3,\n                pattern: \"[^|$@#><)(!&%*]*$\",\n                // pattern: // NOTE: avoid using a regex pattern here, as it often has unintended consequences, such as blocking non-English names\n                inputHandler: (val: string) => (this.packageOptions.name = val),\n              })}\n            </div>\n\n            <div class=\"form-group\">\n              ${this.renderFormInput({\n                label: 'Version name',\n                tooltip: `The version of your app displayed to users. This is a string, typically in the form of '1.0.0.0'. This is purely for display purposes to users, Meta Quest Store uses Version Code to determine the latest version of your app.`,\n                tooltipLink:\n                  'https://developer.android.com/guide/topics/manifest/manifest-element.html#vname',\n                inputId: 'version-input',\n                required: true,\n                placeholder: '1.0.0.0',\n                value: this.packageOptions.versionName,\n                spellcheck: false,\n                inputHandler: (val: string) =>\n                  (this.packageOptions.versionName = val),\n              })}\n            </div>\n\n            <div class=\"form-group\">\n              ${this.renderFormInput({\n                label: 'Version code',\n                tooltip: `A positive integer used as your app's version number. This number is used by the Meta Quest Store to determine whether one version is more recent than another, with higher numbers indicating more recent versions.`,\n                tooltipLink:\n                  'https://developer.android.com/guide/topics/manifest/manifest-element.html#vcode',\n                inputId: 'version-code-input',\n                type: 'number',\n                minValue: 1,\n                maxValue: 2100000000,\n                required: true,\n                placeholder: '1',\n                value: this.packageOptions.versionCode.toString(),\n                inputHandler: (val: string) =>\n                  (this.packageOptions.versionCode = parseInt(val, 10)),\n              })}\n            </div>\n          </div>\n\n\n          <sl-details @sl-show=${() => this.rotateNinety()} @sl-hide=${() => this.rotateZero()}>\n            <div class=\"details-summary\" slot=\"summary\">\n              <p>All Settings</p>\n              <img class=\"dropdown_icon\" src=\"/assets/new/dropdownIcon.svg\" alt=\"dropdown toggler\"/>\n            </div>\n              <div class=\"adv-settings\">\n                <div class=\"form-group\">\n                  ${this.renderFormInput({\n                    label: 'Manifest URL',\n                    tooltip: `The absolute URL of your web manifest.`,\n                    inputId: 'manifest-url-input',\n                    type: 'url',\n                    value: this.packageOptions.manifestUrl,\n                    readonly: true,\n                    placeholder: 'https://myawesomepwa.com/manifest.json',\n                    inputHandler: (val: string) =>\n                      (this.packageOptions.manifestUrl = val),\n                  })}\n                </div>\n\n                <div class=\"form-group\">\n                  <label>Signing key</label>\n                  <div class=\"form-check\">\n                    ${this.renderFormInput({\n                      label: 'New',\n                      tooltip: `Recommended for new Meta Quest apps. PWABuilder will generate a new signing key for you and sign your app package with it. Your download will contain the new signing key details.`,\n                      inputId: 'signing-new-input',\n                      name: 'signingMode',\n                      value: 'new',\n                      type: 'radio',\n                      checked:\n                        this.packageOptions.signingMode === SigningMode.New,\n                      inputHandler: () =>\n                        this.signingModeChanged(SigningMode.New),\n                    })}\n                  </div>\n                  <div class=\"form-check\">\n                    ${this.renderFormInput({\n                      label: 'None',\n                      tooltip:\n                        'PWABuilder will generate an unsigned APK. Unsigned APKs cannot be uploaded to the Meta Quest Store; you will need to sign the APK manually via Java keytool before submitting to the Store.',\n                      tooltipLink:\n                        'https://docs.oracle.com/en/java/javase/12/tools/keytool.html',\n                      inputId: 'signing-none-input',\n                      name: 'signingMode',\n                      value: 'none',\n                      type: 'radio',\n                      checked:\n                        this.packageOptions.signingMode === SigningMode.None,\n                      inputHandler: () =>\n                        this.signingModeChanged(SigningMode.None),\n                    })}\n                  </div>\n                  <div class=\"form-check\">\n                    ${this.renderFormInput({\n                      label: 'Existing',\n                      tooltip:\n                        'Recommended for existing apps in the Meta Quest Store. Use this option if you already have a signing key and you want to publish a new version of an existing app in the Meta Quest Store.',\n                      inputId: 'signing-mine-input',\n                      name: 'signingMode',\n                      value: 'mine',\n                      type: 'radio',\n                      checked:\n                        this.packageOptions.signingMode ===\n                        SigningMode.Existing,\n                      inputHandler: () =>\n                        this.signingModeChanged(SigningMode.Existing),\n                    })}\n                  </div>\n\n                  ${this.renderSigningKeyFields()}\n                </div>\n              </div>\n            </sl-details>\n        </div>\n      </form>\n      \n    </div>\n    `;\n  }\n\n  renderSigningKeyFields(): TemplateResult {\n    // If we're not signing with an existing key, there's nothing to render.\n    if (this.packageOptions.signingMode !== SigningMode.Existing) {\n      return html``;\n    }\n\n    return this.renderExistingSigningKeyFields();\n  }\n\n  renderExistingSigningKeyFields(): TemplateResult {\n    return html`\n      <div class=\"signing-key-fields\">\n        <div class=\"form-group\">\n          <label for=\"signing-key-file-input\">\n            Keystore file\n            ${this.renderTooltip({\n              label: 'Keystore file',\n              inputId: 'signing-key-file-input',\n              tooltipLink:\n                'https://developer.android.com/studio/publish/app-signing',\n              tooltip:\n                \"Your existing .keystore file used to sign the previous version of your app. If you don't have an existing .keystore file, you should choose 'New' above.\",\n            })}\n          </label>\n          <input\n            type=\"file\"\n            class=\"form-control\"\n            id=\"signing-key-file-input\"\n            @change=\"${(e: Event) => this.signingKeyUploaded(e.target)}\"\n            accept=\".keystore\"\n            required\n          />\n        </div>\n\n        <div class=\"form-group\">\n          ${this.renderFormInput({\n            label: 'Keystore password',\n            tooltip: 'The password to access the .keystore file',\n            tooltipLink:\n              'https://developer.android.com/studio/publish/app-signing',\n            inputId: 'key-store-password-input',\n            type: 'password',\n            minLength: 6,\n            required: true,\n            value: this.existingSigningKey.storePassword,\n            inputHandler: (val: string) => {\n              this.existingSigningKey.storePassword =\n                this.existingSigningKey.password = val;\n            },\n          })}\n        </div>\n\n        <div class=\"form-group\">\n          ${this.renderFormInput({\n            label: 'Key alias',\n            tooltip: 'The alias of the key to sign the app package with.',\n            tooltipLink:\n              'https://developer.android.com/studio/publish/app-signing',\n            inputId: 'key-alias-input',\n            required: true,\n            placeholder: 'my-key-alias',\n            value: this.existingSigningKey.alias,\n            spellcheck: false,\n            inputHandler: (val: string) =>\n              (this.existingSigningKey.alias = val),\n          })}\n        </div>\n      </div>\n    `;\n  }\n\n  signingKeyUploaded(event: any) {\n    const filePicker = event as HTMLInputElement;\n    if (filePicker && filePicker.files && filePicker.files.length > 0) {\n      const keyFile = filePicker.files[0];\n      // Make sure it's a reasonable size.\n      if (keyFile && keyFile.size > maxSigningKeySizeInBytes) {\n        console.error('Signing key file is too large. Max size:', {\n          maxSize: maxSigningKeySizeInBytes,\n          fileSize: keyFile.size,\n        });\n      }\n\n      // Read it in as a Uint8Array and store it in our signing object.\n      const fileReader = new FileReader();\n      fileReader.onload = () =>\n        (this.existingSigningKey.keyStoreFile = fileReader.result as string);\n\n      // Log any errors.\n      fileReader.onerror = progressEvent => {\n        console.error(\n          'Unable to read signing key file',\n          fileReader.error,\n          progressEvent\n        );\n      };\n\n      // Kick off reading the file.\n      fileReader.readAsDataURL(keyFile as Blob);\n    }\n  }\n\n  /**\n   * Called when the user changes the signing mode.\n   */\n  signingModeChanged(mode: SigningMode) {\n    this.packageOptions.signingMode = mode;\n\n    if (mode === SigningMode.Existing) {\n      this.packageOptions.existingSigningKey = this.existingSigningKey;\n    } else {\n      this.packageOptions.existingSigningKey = null;\n    }\n\n    // We need to re-render because Lit isn't watching packageOptions.signing, as it's a nested object.\n    this.requestUpdate();\n  }\n}\n","import { LitElement, css, html, TemplateResult } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { AnalyticsBehavior, recordProcessStep, recordPWABuilderProcessStep } from '../utils/analytics';\nimport { getURL } from '../services/app-info';\nimport { generatePackage, Platform } from '../services/publish';\n\nimport {\n  // smallBreakPoint,\n  mediumBreakPoint,\n  largeBreakPoint,\n  //xLargeBreakPoint,\n  xxxLargeBreakPoint,\n  smallBreakPoint,\n} from '../utils/css/breakpoints';\n\nimport './windows-form';\nimport './android-form';\nimport './ios-form';\nimport './oculus-form';\nimport { AppPackageFormBase } from './app-package-form-base';\nimport { PackageOptions } from '../utils/interfaces';\n\n@customElement('publish-pane')\nexport class PublishPane extends LitElement {\n\n  // tells page we are generating a package\n  @state() generating = false;\n\n  // Used to switch from cards to form true = cards, false = forms\n  @state() cardsOrForm = true;\n\n\n  // Used for google play store\n  @state() isGooglePlay = true;\n  @state() selectedStore = \"\";\n\n  // Used to download files\n  @state() readyToDownload = false;\n  @state() blob: Blob | File | null | undefined;\n  @state() testBlob: Blob | File | null | undefined;\n  @state() downloadFileName: string | null = null;\n  @state() feedbackMessages: TemplateResult[] = [];\n\n  @property() preventClosing = false;\n\n  @state() storeMap: any = {\n  \"Windows\":\n    {\n      \"logo\": \"/assets/windows_icon.svg\",\n      \"packaging_text\": \"Click below for instructions on how to submit to the Windows Store.\",\n      \"package_instructions\": \"https://docs.pwabuilder.com/#/builder/windows\"\n    },\n  \"Android\":\n    {\n      \"logo\": \"/assets/android_icon.svg\"\n      /* Android packaging text is handle in the function so that it will update on apk toggle */\n    },\n  \"iOS\":\n    {\n      \"logo\": \"/assets/apple_icon.svg\",\n      \"packaging_text\": \"Click below for instructions on how to submit to the Apple App Store.\",\n      \"package_instructions\": \"https://docs.pwabuilder.com/#/builder/app-store\"\n    },\n  \"Meta\":\n    {\n      \"logo\": \"/assets/meta_icon.svg\",\n      \"packaging_text\": \"Click below for instructions on how to submit to the Meta Quest Store.\",\n      \"package_instructions\": \"https://docs.pwabuilder.com/#/builder/meta\"\n    }\n}\n\n\n  readonly platforms: ICardData[] = [\n    {\n      title: 'Windows',\n      factoids: [\n        \"PWAs can be indistinguishable from native apps on Windows\",\n        \"PWAs are first class applications.\",\n        \"Collect 100% of revenue generated via third party commerce platforms.\",\n        \"1B+ store enabled devices.\"\n      ],\n      isActionCard: true,\n      icon: '/assets/Publish_Windows.svg',\n      renderDownloadButton: () => this.renderWindowsDownloadButton()\n    },\n    {\n      title: 'Android',\n      factoids: [\n        \"PWAs are first class applications\",\n        \"One app store listing for all devices (mobile, tablet, desktop)\",\n        \"2.5 billion store enabled devices\"\n      ],\n      isActionCard: true,\n      icon: '/assets/Publish_Android.svg',\n      renderDownloadButton: () => this.renderAndroidDownloadButton()\n    },\n\n    {\n      title: 'iOS',\n      factoids: [\n        \"Leverage same codebase across all platforms\",\n        \"Large user base.\",\n        \"Premium devices.\"\n      ],\n      isActionCard: true,\n      icon: '/assets/Publish_Apple.svg',\n      renderDownloadButton: () => this.renderiOSDownloadButton()\n    },\n    {\n      title: 'Meta Quest',\n      factoids: [\n        \"PWAs are first class applications\",\n        \"Bring your 2D apps to VR's immersive screen\",\n        \"Build immersive 3D experiences for VR using WebXR\",\n        \"Currently in developer preview via sideloading\"\n      ],\n      isActionCard: true,\n      icon: '/assets/Publish_Meta.svg',\n      renderDownloadButton: () => this.renderOculusDownloadButton()\n    }\n  ];\n\n  static get styles() {\n    return [\n    css`\n      * {\n        box-sizing: border-box;\n      }\n\n      #pp-frame-wrapper {\n        width: 100%;\n        height: 90vh;\n      }\n      #pp-frame-content {\n        display: flex;\n        flex-direction: column;\n        height: 100%;\n      }\n      #pp-frame-header {\n        display: flex;\n        flex-direction: column;\n        row-gap: .25em;\n        padding: 1em;\n        padding-bottom: 0;\n      }\n      #pp-frame-header > * {\n        margin: 0;\n      }\n      #pp-frame-header h1 {\n        font-size: 24px;\n      }\n      #pp-frame-header p {\n        font-size: 14px;\n      }\n      .card-wrapper {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        box-shadow: 0px 4px 10px 4px rgba(0, 0, 0, 0.05);\n        position: relative;\n        padding: 1em;\n      }\n      .packaged-tracker {\n        height: max-content;\n        width: 33%;\n        background-color: #E2F2E8;\n        align-self: flex-end;\n        justify-self: flex-end;\n        border-bottom-left-radius: 5px;\n        padding: 7px;\n        padding-left: 9px;\n        position: absolute;\n        top: 0;\n        right: 0;\n      }\n      .packaged-tracker p {\n        margin: 0;\n        text-align: center;\n        color: #50BA87;\n        font-size: 10px;\n        line-height: 12px;\n        font-weight: bold;\n      }\n      .title-block {\n        box-sizing: border-box;\n        display: flex;\n        flex-direction: column;\n        align-items: flex-start;\n        justify-content: flex-start;\n        width: 100%;\n        row-gap: .45em;\n      }\n      .title-block h3 {\n        margin: 0;\n        font-size: 24px;\n      }\n      .factoids {\n        width: 100%;\n        height: max-content;\n        padding-left: 16px;\n        margin: 0;\n        margin-top: 10px;\n      }\n      .factoids li {\n        font-size: 14px;\n      }\n      .platform-actions-block {\n        align-self: center;\n        display: flex;\n        justify-content: center;\n        row-gap: 10px;\n        width: 100%;\n      }\n      #store-cards {\n        width: 100%;\n        height: 100%;\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        grid-gap: .75em;\n        padding: 1em;\n        overflow-y: auto;\n      }\n      app-button {\n        display: flex;\n        justify-content: center;\n      }\n      .package-button {\n        all: unset;\n        width: 75%;\n        background-color: black;\n        color: white;\n        font-size: 14px;\n        border-radius: 50px;\n        padding: .75em 1em;\n        border: none;\n        text-align: center;\n        font-weight: bold;\n      }\n      .package-button:hover {\n        cursor: pointer;\n        background-color: rgba(0, 0, 0, 0.75);\n      }\n      #apk-tabs {\n        display: flex;\n        align-items: baseline;\n        width: 100%;\n        border-bottom: 2px solid #5D5DB9;\n        margin-top: 20px;\n        margin-bottom: 14px;\n      }\n      .tab-holder {\n        width: 100%;\n        display: flex;\n        align-items: center;\n        gap: .5em;\n        justify-content: center;\n      }\n      .tab-holder p {\n        font-size: 20px;\n        font-weight: 700;\n        line-height: 20px;\n        letter-spacing: 0px;\n        text-align: center;\n        margin: 0;\n        padding: 10px 0;\n        white-space: nowrap;\n      }\n      .tab-holder p:hover {\n        cursor: pointer;\n      }\n      #other-android{\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n      #info-tooltip {\n        height: 20px\n      }\n      .selected-apk {\n        border-bottom: 5px solid #5D5DB9;\n        color: #5D5DB9;\n      }\n\n      .unselected-apk {\n        border-bottom: 5px solid transparent;\n      }\n      #pp-form-header {\n        display: flex;\n        flex-direction: column;\n        background-color: #F2F3FB;\n        border-top-left-radius: 20px;\n        border-top-right-radius: 20px;\n        padding: 1em;\n        gap: .5em;\n      }\n      #pp-form-header > img {\n        width: 25px;\n      }\n      #pp-form-header > button {\n        all: unset;\n      }\n      #pp-form-header > button:hover {\n        cursor: pointer;\n      }\n      #pp-form-header-content {\n        display: flex;\n        gap: 1em;\n      }\n      #pp-form-header-content img {\n        height: 50px;\n      }\n      #pp-form-header-text {\n        display: flex;\n        flex-direction: column;\n      }\n      #pp-form-header-text > * {\n        margin: 0;\n      }\n      #pp-form-header-text h1 {\n        font-size: 24px;\n        white-space: nowrap;\n        line-height: 24px;\n      }\n      #pp-form-header-text p {\n        font-size: 14px;\n        color: rgba(0, 0, 0, 0.5)\n      }\n\n      windows-form, android-form, ios-form, oculus-form {\n        height: 100%;\n      }\n\n      #form-area {\n        height: 100%;\n        width: 100%;\n        overflow: auto;\n        position: relative;\n      }\n\n      #form-area[data-store=\"Android\"] {\n        padding-top: 0;\n        flex-direction: column;\n      }\n\n      .dialog::part(body){\n        padding: 0;\n        width: 100%;\n      }\n      .dialog::part(title){\n        display: none;\n      }\n      .dialog::part(panel) {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        border-radius: 20px;\n      }\n      .dialog::part(overlay){\n        backdrop-filter: blur(10px);\n      }\n      .dialog::part(close-button__base){\n        position: absolute;\n        top: 5px;\n        right: 5px;\n        z-index: 1000;\n      }\n\n      #unsigned-tooltip{\n        position: relative;\n      }\n\n      .toolTip {\n        visibility: hidden;\n        font-size: 14px;\n        width: 150px;\n        background: black;\n        color: white;\n        font-weight: 500;\n        text-align: center;\n        border-radius: 6px;\n        padding: .75em;\n        /* Position the tooltip */\n        position: absolute;\n        top: 25px;\n        left: -100px;\n        z-index: 1;\n        box-shadow: 0px 2px 20px 0px #0000006c;\n      }\n      #unsigned-tooltip:hover .toolTip {\n        visibility: visible;\n      }\n\n      #feedback {\n        position: absolute;\n        bottom: .5em;\n        padding: 0 1em;\n        width: 100%;\n      }\n\n      .feedback-holder {\n        display: flex;\n        gap: .5em;\n        padding: .5em;\n        border-radius: 3px;\n        width: 100%;\n      }\n\n      .type-error {\n        align-items: flex-start;\n        background-color: #FAEDF1;\n        border-left: 4px solid var(--error-color);\n      }\n\n      .type-success {\n        align-items: center;\n        background-color: #eefaed;\n        border-left: 4px solid var(--success-color);\n      }\n\n      .feedback-holder p {\n        margin: 0;\n        font-size: 14px;\n      }\n\n      .error-title {\n        font-weight: bold;\n      }\n\n      .error-actions {\n        display: flex;\n        align-items: center;\n        gap: 1em;\n        margin-top: .25em;\n      }\n\n      .error-actions > * {\n        all: unset;\n        color: black;\n        font-weight: bold;\n        font-size: 14px;\n        border-bottom: 1px solid transparent;\n      }\n\n      .error-actions > *:hover {\n        cursor: pointer;\n        border-bottom: 1px solid black;\n      }\n\n      .close_feedback {\n        margin-left: auto;\n      }\n\n      .close_feedback:hover {\n        cursor: pointer;\n      }\n\n      #form-extras {\n        display: flex;\n        justify-content: space-between;\n        padding: 1.5em 2em;\n        background-color: #F2F3FB;\n        border-bottom-right-radius: 20px;\n        border-bottom-left-radius: 20px;\n      }\n\n      #form-details-block {\n        width: 50%;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-between;\n      }\n\n      #form-details-block p {\n        font-size: 14px;\n        color: #808080;\n      }\n\n      #form-options-actions {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: .5em;\n      }\n\n      #generate-submit::part(base) {\n        background-color: black;\n        color: white;\n        height: 3em;\n        width: 100%;\n        border-radius: 50px;\n      }\n\n      #form-extras sl-button::part(label){\n        font-size: 16px;\n        padding: .5em 2em;\n        display: flex;\n        align-items: center;\n      }\n\n      .arrow_link {\n        display: flex;\n        align-items: center;\n        justify-content: flex-start;\n        font-weight: bold;\n        margin-bottom: .25em;\n        font-size: 14px;\n      }\n      .arrow_link a {\n        text-decoration: none;\n        border-bottom: 1px solid rgb(79, 63, 182);\n        font-size: 1em;\n        font-weight: bold;\n        margin: 0px 0.5em 0px 0px;\n        line-height: 1em;\n        color: rgb(79, 63, 182);\n      }\n      .arrow_link a:visited {\n        color: #4F3FB6;\n      }\n      .arrow_link:hover {\n        cursor: pointer;\n      }\n      .arrow_link:hover img {\n        animation: bounce 1s;\n      }\n\n      @keyframes bounce {\n        0%, 20%, 50%, 80%, 100% {\n            transform: translateY(0);\n        }\n        40% {\n          transform: translateX(-5px);\n        }\n        60% {\n            transform: translateX(5px);\n        }\n      }\n\n      #tou-link{\n        color: 757575;\n        font-size: 14px;\n      }\n\n      @media(max-width: 640px){\n        #form-extras {\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          gap: 1em;\n        }\n        #form-details-block {\n          flex-direction: column;\n          gap: .75em;\n          align-items: center;\n          text-align: center;\n          width: 100%;\n        }\n        #form-options-actions {\n          flex-direction: column;\n        }\n      }\n\n      @media(min-height: 900px){\n        #pp-frame-wrapper {\n          width: 100%;\n          height: 80vh;\n        }\n      }\n\n      /* > 1920 */\n      ${xxxLargeBreakPoint(css``)}\n\n      /* 640px - 1023px */\n      ${largeBreakPoint(css``)}\n\n      /* 480px - 639px */\n      ${mediumBreakPoint(css`\n        #store-cards {\n          display: flex;\n          flex-direction: column;\n          row-gap: .5em;\n          overflow-y: auto;\n        }\n      `)}\n      /* < 480 */\n      ${smallBreakPoint(css`\n        #store-cards {\n          display: flex;\n          flex-direction: column;\n          row-gap: .5em;\n          overflow-y: auto;\n        }\n        #pp-frame-header{\n          margin-bottom: 10px;\n          padding: 1em 2em 0em 1em;\n        }\n        #pp-frame-header h1 {\n          font-size: 20px;\n          line-height: 20px;\n        }\n        #pp-frame-header p {\n          font-size: 12px;\n        }\n        #pp-form-header-content img {\n          height: 35px;\n        }\n        #pp-form-header-text h1 {\n          font-size: 20px;\n          white-space: nowrap;\n          line-height: 20px;\n        }\n        #pp-form-header-text p {\n          font-size: 12px;\n        }\n        #apk-type p {\n          font-size: 16px;\n        }\n\n        #info-tooltip {\n          height: 16px\n        }\n\n      `)}\n    `\n    ];\n  }\n\n  constructor() {\n    super();\n  }\n\n  firstUpdated(){\n\n  }\n\n  renderWindowsDownloadButton(): TemplateResult {\n    return html`\n      <button class=\"package-button\" id=\"windows-package-button\" @click=\"${() => this.showWindowsOptions()}\">\n        Generate Package\n      </button>\n    `;\n  }\n\n  renderAndroidDownloadButton(): TemplateResult {\n    return html`\n      <button class=\"package-button\" id=\"android-package-button\" @click=\"${() => this.showAndroidOptions()}\">\n        Generate Package\n      </button>\n    `;\n  }\n\n  renderiOSDownloadButton(): TemplateResult {\n    return html`\n      <button class=\"package-button\" id=\"ios-package-button\" @click=\"${() => this.showiOSOptions()}\">\n        Generate Package\n      </button>\n    `;\n  }\n\n  renderOculusDownloadButton(): TemplateResult {\n    return html`\n      <button class=\"package-button\" id=\"oculus-package-button\" @click=\"${() => this.showMetaOptions()}\">\n        Generate Package\n      </button>\n    `;\n  }\n\n  renderForm(){\n    if(this.selectedStore === \"Windows\"){\n      return html`<windows-form id=\"packaging-form\" .generating=${this.generating}></windows-form>`\n    } else if(this.selectedStore === \"Android\"){\n      return html`\n      <div id=\"apk-tabs\">\n        <div class=\"tab-holder selected-apk\">\n          <p class=\"apk-type\" @click=${(e: any) => this.toggleApkType(e)}>Google Play</p>\n        </div>\n        <div class=\"tab-holder unselected-apk\">\n          <p class=\"apk-type\" id=\"other-android\" @click=${(e: any) => this.toggleApkType(e)}>Other Android</p>\n          <div id=\"unsigned-tooltip\">\n            <img src=\"/assets/new/tooltip.svg\" alt=\"info circle tooltip\" />\n            <span class=\"toolTip\">\n              Generates an unsigned APK.\n            </span>\n          </div>\n        </div>\n      </div>\n      ${this.isGooglePlay ?\n        html`<android-form id=\"packaging-form\" .generating=${this.generating} .isGooglePlayApk=${this.isGooglePlay}></android-form>` :\n        html`<android-form id=\"packaging-form\" .generating=${this.generating} .isGooglePlayApk=${this.isGooglePlay}></android-form>`\n      }`\n    } else if(this.selectedStore === \"Meta\"){\n      return html`<oculus-form id=\"packaging-form\" .generating=${this.generating}>\n      </oculus-form>`\n    } else {\n      return html`<ios-form id=\"packaging-form\" .generating=${this.generating}></ios-form>`\n    }\n\n  }\n\n  showWindowsOptions() {\n    recordPWABuilderProcessStep(\"windows_store_form_opened\", AnalyticsBehavior.ProcessCheckpoint)\n    this.selectedStore = \"Windows\";\n    this.cardsOrForm = false;\n    this.requestUpdate();\n  }\n\n  showAndroidOptions() {\n    recordPWABuilderProcessStep(\"android_store_form_opened\", AnalyticsBehavior.ProcessCheckpoint);\n    this.selectedStore = \"Android\";\n    this.cardsOrForm = false;\n    this.requestUpdate();\n  }\n\n  toggleApkType(event: any){\n    let old = this.shadowRoot!.querySelector(\".selected-apk\");\n    old?.classList.replace(\"selected-apk\", \"unselected-apk\");\n    let next = event.target.parentNode;\n    next.classList.replace(\"unselected-apk\", \"selected-apk\");\n\n    if(event.target.innerHTML === \"Google Play\"){\n      this.isGooglePlay = true;\n    } else {\n      this.isGooglePlay = false;\n    }\n  }\n\n  showiOSOptions() {\n    recordPWABuilderProcessStep(\"ios_store_form_opened\", AnalyticsBehavior.ProcessCheckpoint);\n    this.selectedStore = \"iOS\";\n    this.cardsOrForm = false;\n    this.requestUpdate();\n  }\n\n  showMetaOptions() {\n    recordPWABuilderProcessStep(\"meta_store_form_opened\", AnalyticsBehavior.ProcessCheckpoint);\n    this.selectedStore = \"Meta\";\n    this.cardsOrForm = false;\n    this.requestUpdate();\n  }\n\n  async generate(platform: Platform, options?: PackageOptions) {\n    // Record analysis results to our analytics portal.\n    recordProcessStep(\n      'analyze-and-package-pwa',\n      `create-${platform}-package`,\n      AnalyticsBehavior.CompleteProcess,\n      { url: getURL() });\n\n      recordProcessStep(\n        'pwa-builder',\n        `create-${platform}-package`,\n        AnalyticsBehavior.CompleteProcess,\n        { url: getURL() });\n\n    try {\n      this.generating = true;\n      const packageData = await generatePackage(platform, options);\n\n      if (packageData) {\n        this.downloadFileName = `${packageData.appName}.zip`;\n        if (packageData.type === 'test') {\n          this.testBlob = packageData.blob;\n        } else {\n          this.blob = packageData.blob;\n          this.readyToDownload = true;\n          this.downloadPackage()\n        }\n      }\n      this.renderSuccessMessage()\n    } catch (err: any) {\n      this.renderErrorMessage(err);\n      //this.showAlertModal(err as Error, platform);\n      recordProcessStep(\n        'analyze-and-package-pwa',\n        `create-${platform}-package-failed`,\n        AnalyticsBehavior.CancelProcess,\n        {\n          url: getURL(),\n          error: err\n        });\n        recordProcessStep(\n          'pwa-builder',\n          `create-${platform}-package-failed`,\n          AnalyticsBehavior.CancelProcess,\n          {\n            url: getURL(),\n            error: err\n          });\n    } finally {\n      this.generating = false;\n    }\n  }\n\n  // takes the information from the selectedStore and error and forms a card to \n  // convey the error message to the user in a user friendly way\n  // directs users towards FAQ\n  renderErrorMessage(err: any){\n    let response = err.response;\n    let stack_trace = `The site I was testing is: ${getURL()}\\n`; // stored in copy st button\n    let title = \"\"; // first line of error message\n    let message = \"\"; // text that comes after error code in quick desc\n    let quick_desc = \"\"; // the quick description they get to read (searchable)\n\n    \n    if(err.message === \"Failed to fetch\"){\n      title = err.message;\n      quick_desc = \"Our service was unable to package your PWA. Please open an issue on github here: https://github.com/pwa-builder/PWABuilder/issues/new/choose\"\n      stack_trace += \"No stack trace available\";\n    }\n    else if(this.selectedStore === \"Windows\"){\n      let errString = err.stack;\n      stack_trace += errString.slice(\n        errString.indexOf(\" at \") + 1\n      ); \n      title = errString.split(\",\")[0]; // first line of error message\n      quick_desc = errString.slice(\n        errString.indexOf(\"Details:\") + 8,\n        errString.indexOf(\" at \")\n      ); // the quick description they get to read (searchable)\n\n    } else if (this.selectedStore === \"Android\"){\n      title = response.statusText; \n      stack_trace += response.stack_trace.split(\"stack:\")[1]; \n      message = response.stack_trace.split(\"stack:\")[0];\n      quick_desc = `Status code: ${response.status}. ${message}` \n    } else {\n      title = response.statusText; \n      stack_trace += err.stack; \n      quick_desc = `Status code: ${response.status}. ${response.stack_trace}` \n    }\n    let error = html`\n      <div class=\"feedback-holder type-error\">\n        <img src=\"/assets/new/stop.svg\" alt=\"invalid result icon\" />\n        <div class=\"error-info\">\n          <p class=\"error-title\">${title}</p>\n          <p class=\"error-desc\">${quick_desc}</p>\n          <div class=\"error-actions\">\n            <button class=\"copy_stack\" @click=${() => this.copyText(stack_trace)}>Copy stack trace</button>\n            <a href=\"https://docs.pwabuilder.com/#/builder/faq\" target=\"_blank\" rel=\"noopener\">Visit FAQ</a>\n          </div>\n        </div>\n        <img @click=${() => this.feedbackMessages = []} class=\"close_feedback\" src=\"assets/images/Close_desk.png\" alt=\"close icon\" />\n      </div>\n    `\n    this.feedbackMessages.push(error);\n  }\n\n  // renders successfully downloaded message upon successful downloads\n  renderSuccessMessage(){\n    this.feedbackMessages.push(html`\n      <div class=\"feedback-holder type-success\">\n        <img src=\"/assets/new/valid.svg\" alt=\"successful download icon\" />\n        <p class=\"success-desc\">${`Congratulations! Your ${this.selectedStore} package has successfully downloaded!`}</p>\n        <img @click=${() => this.feedbackMessages = []} class=\"close_feedback\" src=\"assets/images/Close_desk.png\" alt=\"close icon\" />\n      </div>\n    `);\n  }\n\n  // copy string to clipboard\n  copyText(text: string){\n    navigator.clipboard.writeText(text);\n  }\n\n  // before we downloaded the package using a service\n  // now we just do it the vanilla js way\n  async downloadPackage(){\n    let blob = (this.blob || this.testBlob);\n    if (blob) {\n      let filename = this.downloadFileName || 'your_pwa.zip';\n      var element = document.createElement('a');\n      element.href = URL.createObjectURL(blob!)\n      element.setAttribute('download', filename);\n\n      element.style.display = 'none';\n      document.body.appendChild(element);\n\n      element.click();\n\n      document.body.removeChild(element);\n\n      this.blob = undefined;\n      this.testBlob = undefined;\n    }\n  }\n\n  // renders the store cards with their associated factoids from this.platforms\n  renderContentCards(): TemplateResult[] {\n    return this.platforms.map(\n      platform => html`\n        <div class=\"card-wrapper\">\n          ${true ? html`` :\n            html`\n            <div class=\"packaged-tracker\"> <!-- This will eventually be in an \"if packaged previously\" -->\n            <p>Packaged Previously</p>\n            </div>`\n          }\n          <div class=\"title-block\">\n            <img class=\"platform-icon\" src=\"${platform.icon}\" alt=\"platform icon\" />\n            <h3>${platform.title}</h3>\n            <!-- TODO need to fix the platform action blocks text spacing for the left. -->\n            <div class=\"platform-actions-block\">\n              ${platform.renderDownloadButton()}\n            </div>\n            <ul class=\"factoids\">\n              ${platform.factoids.map((fact: string) => html`<li>${fact}</li>`)}\n            </ul>\n          </div>\n        </div>`\n    );\n  }\n\n  async hideDialog(e: any){\n    let dialog: any = this.shadowRoot!.querySelector(\".dialog\");\n    if(e.target === dialog){\n      this.blob = undefined;\n      this.generating = false;\n      await dialog!.hide();\n      recordPWABuilderProcessStep(\"publish_pane_closed\", AnalyticsBehavior.ProcessCheckpoint);\n      document.body.style.height = \"unset\";\n      this.cardsOrForm = true;\n    }\n  }\n\n  handleRequestClose(e: Event) {\n    if (this.preventClosing) {\n      e.preventDefault();\n    }\n  }\n\n  // goes from form back to cards when you click the back arrow\n  backToCards(){\n    this.cardsOrForm = !this.cardsOrForm;\n    this.feedbackMessages = [];\n    recordPWABuilderProcessStep(`left_${this.selectedStore}_form`, AnalyticsBehavior.ProcessCheckpoint);\n  }\n\n  // the footer of the pane that has links to packaging instructions and download button\n  renderFormFooter(){\n    // Special case for Android since we have to toggle some info due to the \"Other Android\" scenario\n    if(this.selectedStore === \"Android\"){\n      return html`\n        <div id=\"form-extras\">\n          <div id=\"form-details-block\">\n            <p>${this.isGooglePlay ? \"Click below for instructions on how to submit to the Google Play Store.\" : \"Click below for instructions on how to submit to other Android stores.\"}</p>\n            <div class=\"arrow_link\">\n              <a @click=${() => recordPWABuilderProcessStep(`${this.isGooglePlay ? this.selectedStore.toLowerCase() : `other_${this.selectedStore.toLowerCase()}` }_packaging_instructions_clicked`, AnalyticsBehavior.ProcessCheckpoint)} href=${this.isGooglePlay ? \"https://docs.pwabuilder.com/#/builder/android\" : \"https://docs.pwabuilder.com/#/builder/other-android\"} target=\"_blank\" rel=\"noopener\">Packaging Instructions</a>\n              <img src=\"/assets/new/arrow.svg\" alt=\"arrow\" role=\"presentation\"/>\n            </div>\n          </div>\n          <div id=\"form-options-actions\" class=\"modal-actions\">\n            <sl-button  id=\"generate-submit\" type=\"submit\" @click=${() => this.submitForm()} ?loading=\"${this.generating}\" ?disabled=${this.feedbackMessages.length > 0} >\n              Download Package\n            </sl-button>\n            <a\n              target=\"_blank\"\n              rel=\"noopener\"\n              href=\"https://github.com/pwa-builder/PWABuilder/blob/master/TERMS_OF_USE.md\"\n              id=\"tou-link\"\n              @click=${() => recordPWABuilderProcessStep(\"TOU_clicked\", AnalyticsBehavior.ProcessCheckpoint)}\n              >Terms of Use</a>\n          </div>\n        </div>\n    `\n    }\n    return html`\n      <div id=\"form-extras\">\n        <div id=\"form-details-block\">\n          <p>${this.storeMap[this.selectedStore].packaging_text}</p>\n          <div class=\"arrow_link\">\n            <a @click=${() => recordPWABuilderProcessStep(`${this.selectedStore.toLowerCase()}_packaging_instructions_clicked`, AnalyticsBehavior.ProcessCheckpoint)} href=${this.storeMap[this.selectedStore].package_instructions} target=\"_blank\" rel=\"noopener\">Packaging Instructions</a>\n            <img src=\"/assets/new/arrow.svg\" alt=\"arrow\" role=\"presentation\"/>\n          </div>\n        </div>\n        <div id=\"form-options-actions\" class=\"modal-actions\">\n          <sl-button  id=\"generate-submit\" type=\"submit\" @click=${() => this.submitForm()} ?loading=\"${this.generating}\" >\n            Download Package\n          </sl-button>\n          <a\n            target=\"_blank\"\n            rel=\"noopener\"\n            href=\"https://github.com/pwa-builder/PWABuilder/blob/master/TERMS_OF_USE.md\"\n            id=\"tou-link\"\n            @click=${() => recordPWABuilderProcessStep(\"TOU_clicked\", AnalyticsBehavior.ProcessCheckpoint)}\n            >Terms of Use</a>\n        </div>\n      </div>\n    `\n  }\n\n  // validates packaging options and downloads package if valid\n  // reports validity if not\n  submitForm(){\n    let platForm = (this.shadowRoot!.getElementById(\"packaging-form\") as AppPackageFormBase); // windows-form | android-form | ios-form | oculus-form\n    let form = platForm.getForm(); // the actual form element inside the platform form.\n\n    if(form!.checkValidity()){\n      let packagingOptions = platForm!.getPackageOptions();\n      this.generate(this.selectedStore.toLowerCase() as Platform, packagingOptions);\n    } else {\n      form!.reportValidity();\n    }\n  }\n\n  render() {\n    return html`\n      <sl-dialog class=\"dialog\" @sl-show=${() => document.body.style.height = \"100vh\"} @sl-hide=${(e: any) => this.hideDialog(e)} @sl-request-close=${(e:any) => this.handleRequestClose(e)} noHeader>\n        <div id=\"pp-frame-wrapper\">\n          <div id=\"pp-frame-content\">\n          ${this.cardsOrForm ?\n            html`\n              <div id=\"pp-frame-header\">\n                <h1>Awesome! Your PWA is store ready!</h1>\n                <p>You are now ready to ship your PWA to the app stores. Generate store-ready packages for the Microsoft Store, Google Play, iOS and Meta stores.</p>\n              </div>\n              <div id=\"store-cards\">\n                ${this.renderContentCards()}\n              </div>\n            `\n            :\n            html`\n              <div id=\"pp-form-header\">\n                <button type=\"button\"><img src=\"/assets/new/back_for_package_form.svg\" alt=\"back to store cards button\" @click=${() => this.backToCards()} /></button>\n                <div id=\"pp-form-header-content\">\n                  <img src=\"${this.storeMap[this.selectedStore].logo}\" alt=\"${this.selectedStore} logo\" />\n                  <div id=\"pp-form-header-text\">\n                    <h1>${this.selectedStore} Package Options</h1>\n                    <p>Customize your ${this.selectedStore} app below!</p>\n                  </div>\n                </div>\n              </div>\n              <div id=\"form-area\" data-store=${this.selectedStore}>\n                ${this.renderForm()}\n                <div id=\"feedback\">${this.feedbackMessages.length > 0 ?  this.feedbackMessages.map((error: TemplateResult) => error) : html``}</div>\n              </div>\n              ${this.renderFormFooter()}\n            `\n          }\n          </div>\n        </div>\n      </sl-dialog>\n\n    `;\n  }\n}\n\ninterface ICardData {\n  title: 'Windows' | 'Android' | 'iOS' | \"Meta Quest\";\n  factoids: string[];\n  isActionCard: boolean;\n  icon: string;\n  renderDownloadButton: () => TemplateResult;\n}\n","import { LitElement, css, html, TemplateResult } from 'lit';\nimport { customElement, state } from 'lit/decorators.js';\nimport { AnalyticsBehavior, recordProcessStep, recordPWABuilderProcessStep } from '../utils/analytics';\nimport { getManifestContext, getURL } from '../services/app-info';\nimport { IOSAppPackageOptions } from '../utils/ios-validation';\nimport { WindowsPackageOptions } from '../utils/win-validation';\nimport { AndroidPackageOptions } from '../utils/android-validation';\nimport { OculusAppPackageOptions } from '../utils/oculus-validation';\nimport { generatePackage, Platform } from '../services/publish';\n\nimport {\n  // smallBreakPoint,\n  mediumBreakPoint,\n  largeBreakPoint,\n  //xLargeBreakPoint,\n  xxxLargeBreakPoint,\n  smallBreakPoint,\n} from '../utils/css/breakpoints';\n\nimport './windows-form';\nimport './android-form';\nimport './ios-form';\nimport './oculus-form';\nimport { fetchOrCreateManifest } from '../services/manifest';\nimport { createWindowsPackageOptionsFromManifest } from '../services/publish/windows-publish';\nimport { ManifestContext } from '../utils/interfaces';\n\n@customElement('test-publish-pane')\nexport class TestPublishPane extends LitElement {\n\n  // tells page we are generating a package\n  @state() generating = false;\n  @state() selectedStore = \"\";\n\n  // Used to download files\n  @state() readyToDownload = false;\n  @state() blob: Blob | File | null | undefined;\n  @state() testBlob: Blob | File | null | undefined;\n  @state() downloadFileName: string | null = null;\n  @state() feedbackMessages: TemplateResult[] = [];\n\n\n  readonly platforms: ICardData[] = [\n    {\n      title: 'Windows',\n      factoids: [\n        \"PWAs can be indistinguishable from native apps on Windows\",\n        \"PWAs are first class applications.\",\n        \"Collect 100% of revenue generated via third party commerce platforms.\",\n        \"1B+ store enabled devices.\"\n      ],\n      isActionCard: true,\n      icon: '/assets/Publish_Windows.svg',\n      renderDownloadButton: () => this.renderWindowsDownloadButton()\n    }\n  ];\n\n  static get styles() {\n    return [\n    css`\n      * {\n        box-sizing: border-box;\n      }\n\n      #pp-frame-wrapper {\n        width: 100%;\n        height: fit-content;\n      }\n      #pp-frame-content {\n        display: flex;\n        flex-direction: column;\n        height: fit-content;\n      }\n      #pp-frame-header {\n        display: flex;\n        flex-direction: column;\n        row-gap: .25em;\n        padding: 1em;\n        padding-bottom: 0;\n      }\n      #pp-frame-header > * {\n        margin: 0;\n      }\n      #pp-frame-header h1 {\n        font-size: 24px;\n      }\n      #pp-frame-header p {\n        font-size: 14px;\n      }\n      .card-wrapper {\n        width: 100%;\n        height: fit-content;\n        display: flex;\n        flex-direction: column;\n        box-shadow: 0px 4px 10px 4px rgba(0, 0, 0, 0.05);\n        position: relative;\n        padding: 1em;\n      }\n      .packaged-tracker {\n        height: max-content;\n        width: 33%;\n        background-color: #E2F2E8;\n        align-self: flex-end;\n        justify-self: flex-end;\n        border-bottom-left-radius: 5px;\n        padding: 7px;\n        padding-left: 9px;\n        position: absolute;\n        top: 0;\n        right: 0;\n      }\n      .packaged-tracker p {\n        margin: 0;\n        text-align: center;\n        color: #50BA87;\n        font-size: 10px;\n        line-height: 12px;\n        font-weight: bold;\n      }\n      .title-block {\n        box-sizing: border-box;\n        display: flex;\n        flex-direction: column;\n        align-items: flex-start;\n        justify-content: flex-start;\n        width: 100%;\n        row-gap: .45em;\n      }\n      .title-block h3 {\n        margin: 0;\n        font-size: 24px;\n      }\n      .factoids {\n        width: 100%;\n        height: max-content;\n        padding-left: 16px;\n        margin: 0;\n        margin-top: 10px;\n      }\n      .factoids li {\n        font-size: 14px;\n      }\n      .platform-actions-block {\n        align-self: center;\n        display: flex;\n        justify-content: center;\n        row-gap: 10px;\n        width: 100%;\n      }\n      #store-cards {\n        width: 100%;\n        height: fit-content;\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        grid-gap: .75em;\n        padding: 1em;\n        overflow-y: auto;\n      }\n      .package-button{\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n      }\n      .package-button::part(base) {\n        all: unset;\n        width: 75%;\n        background-color: white;\n        color: #4F3FB6;\n        border: 1px solid #4F3FB6;\n        font-size: 14px;\n        border-radius: 50px;\n        padding: .75em 1em;\n        text-align: center;\n        font-weight: bold;\n      }\n      .package-button::part(label){\n        padding: 0;\n      }\n      .package-button:hover {\n        cursor: pointer;\n      }\n      #info-tooltip {\n        height: 20px\n      }\n      .dialog::part(body){\n        padding: 0;\n        width: 100%;\n      }\n      .dialog::part(title){\n        display: none;\n      }\n      .dialog::part(panel) {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      }\n      .dialog::part(overlay){\n        backdrop-filter: blur(10px);\n      }\n      .dialog::part(close-button__base){\n        position: absolute;\n        top: 5px;\n        right: 5px;\n      }\n\n      #feedback {\n        position: absolute;\n        bottom: .5em;\n        padding: 0 1em;\n        width: 100%;\n      }\n\n      .feedback-holder {\n        display: flex;\n        gap: .5em;\n        padding: .5em;\n        border-radius: 3px;\n        width: 100%;\n      }\n\n      .type-error {\n        align-items: flex-start;\n        background-color: #FAEDF1;\n        border-left: 4px solid var(--error-color);\n      }\n\n      .type-success {\n        align-items: center;\n        background-color: #eefaed;\n        border-left: 4px solid var(--success-color);\n      }\n\n      .feedback-holder p {\n        margin: 0;\n        font-size: 14px;\n      }\n\n      .error-title {\n        font-weight: bold;\n      }\n\n      .error-actions {\n        display: flex;\n        align-items: center;\n        gap: 1em;\n        margin-top: .25em;\n      }\n\n      .error-actions > * {\n        all: unset;\n        color: black;\n        font-weight: bold;\n        font-size: 14px;\n        border-bottom: 1px solid transparent;\n      }\n\n      .error-actions > *:hover {\n        cursor: pointer;\n        border-bottom: 1px solid black;\n      }\n\n      .close_feedback {\n        margin-left: auto;\n      }\n\n      .close_feedback:hover {\n        cursor: pointer;\n      }\n\n\n\n\n      /* > 1920 */\n      ${xxxLargeBreakPoint(css``)}\n\n      /* 640px - 1023px */\n      ${largeBreakPoint(css``)}\n\n      /* 480px - 639px */\n      ${mediumBreakPoint(css`\n        #store-cards {\n          display: flex;\n          flex-direction: column;\n          row-gap: .5em;\n          overflow-y: auto;\n        }\n      `)}\n      /* < 480 */\n      ${smallBreakPoint(css`\n        #store-cards {\n          display: flex;\n          flex-direction: column;\n          row-gap: .5em;\n          overflow-y: auto;\n        }\n        #pp-frame-header{\n          margin-bottom: 10px;\n          padding: 1em 2em 0em 1em;\n        }\n        #pp-frame-header h1 {\n          font-size: 20px;\n          line-height: 20px;\n        }\n        #pp-frame-header p {\n          font-size: 12px;\n        }\n\n      `)}\n    `\n    ];\n  }\n\n  constructor() {\n    super();\n  }\n\n  firstUpdated(){\n\n  }\n\n  renderWindowsDownloadButton(): TemplateResult {\n    return html`\n      <sl-button id=\"windows-test-pkg-btn\" class=\"package-button\" ?loading=${this.generating} id=\"test-package-button\"\n          @click=\"${this.generateWindowsTestPackage}\" .secondary=\"${true}\">\n        Download Test Package\n      </sl-button>\n    `;\n  }\n\n  async generateWindowsTestPackage() {\n    recordPWABuilderProcessStep(\"windows_test_package_clicked\", AnalyticsBehavior.ProcessCheckpoint);\n    let manifestContext: ManifestContext = getManifestContext();\n    if (manifestContext.isGenerated) {\n      let context = await fetchOrCreateManifest();\n      manifestContext = context!;\n    }\n\n    const options = createWindowsPackageOptionsFromManifest(manifestContext.manifest);\n    await this.generate(\"windows\", options);\n  }\n\n  async generate(platform: Platform, options?: AndroidPackageOptions | IOSAppPackageOptions | WindowsPackageOptions | OculusAppPackageOptions) {\n    // Record analysis results to our analytics portal.\n    recordProcessStep(\n      'analyze-and-package-pwa',\n      `create-${platform}-package`,\n      AnalyticsBehavior.CompleteProcess,\n      { url: getURL() });\n\n      recordProcessStep(\n        'pwa-builder',\n        `create-${platform}-package`,\n        AnalyticsBehavior.CompleteProcess,\n        { url: getURL() });\n\n    try {\n      this.generating = true;\n      const packageData = await generatePackage(platform, options);\n\n      if (packageData) {\n        this.downloadFileName = `${packageData.appName}.zip`;\n        if (packageData.type === 'test') {\n          this.testBlob = packageData.blob;\n        } else {\n          this.blob = packageData.blob;\n          this.readyToDownload = true;\n          this.downloadPackage()\n        }\n      }\n      this.renderSuccessMessage()\n    } catch (err: any) {\n      console.error(err);\n      this.renderErrorMessage(err);\n      //this.showAlertModal(err as Error, platform);\n      recordProcessStep(\n        'analyze-and-package-pwa',\n        `create-${platform}-package-failed`,\n        AnalyticsBehavior.CancelProcess,\n        {\n          url: getURL(),\n          error: err\n        });\n        recordProcessStep(\n          'pwa-builder',\n          `create-${platform}-package-failed`,\n          AnalyticsBehavior.CancelProcess,\n          {\n            url: getURL(),\n            error: err\n          });\n    } finally {\n      this.generating = false;\n      /* this.openAndroidOptions = false;\n      this.openWindowsOptions = false;\n      this.openiOSOptions = false;\n      this.openOculusOptions = false; */\n    }\n  }\n\n  renderErrorMessage(err: any){\n    let errString = err.stack;\n    let stack_trace = `The site I was testing is: ${getURL()}\\n`; // stored in copy st button\n    stack_trace += errString.slice(\n      errString.indexOf(\" at \") + 1\n    ); \n    let title = errString.split(\",\")[0]; // first line of error message\n    let quick_desc = errString.slice(\n      errString.indexOf(\"Details:\") + 8,\n      errString.indexOf(\" at \")\n    ); // the quick description they get to read (searchable)\n    \n    let error = html`\n      <div class=\"feedback-holder type-error\">\n        <img src=\"/assets/new/stop.svg\" alt=\"invalid result icon\" />\n        <div class=\"error-info\">\n          <p class=\"error-title\">${title}</p>\n          <p class=\"error-desc\">${quick_desc}</p>\n          <div class=\"error-actions\">\n            <button class=\"copy_stack\" @click=${() => this.copyText(stack_trace)}>Copy stack trace</button>\n            <a href=\"https://docs.pwabuilder.com/#/builder/faq\" target=\"_blank\" rel=\"noopener\">Visit FAQ</a>\n          </div>\n        </div>\n        <img @click=${() => this.feedbackMessages = []} class=\"close_feedback\" src=\"assets/images/Close_desk.png\" alt=\"close icon\" />\n      </div>\n    `\n    this.feedbackMessages.push(error);\n  }\n\n  renderSuccessMessage(){\n    this.feedbackMessages.push(html`\n      <div class=\"feedback-holder type-success\">\n        <img src=\"/assets/new/valid.svg\" alt=\"successful download icon\" />\n        <p class=\"success-desc\">${`Congratulations! Your ${this.selectedStore} test package has successfully downloaded!`}</p>\n        <img @click=${() => this.feedbackMessages = []} class=\"close_feedback\" src=\"assets/images/Close_desk.png\" alt=\"close icon\" />\n      </div>\n    `);\n  }\n\n  copyText(text: string){\n    navigator.clipboard.writeText(text);\n  }\n\n  async downloadPackage(){\n    let blob = (this.blob || this.testBlob);\n    if (blob) {\n      let filename = this.downloadFileName || 'your_pwa.zip';\n      var element = document.createElement('a');\n      element.href = URL.createObjectURL(blob!)\n      element.setAttribute('download', filename);\n\n      element.style.display = 'none';\n      document.body.appendChild(element);\n\n      element.click();\n\n      document.body.removeChild(element);\n\n      this.blob = undefined;\n      this.testBlob = undefined;\n    }\n  }\n\n  renderContentCards(): TemplateResult[] {\n    return this.platforms.map(\n      platform => html`\n        <div class=\"card-wrapper\">\n          ${true ? html`` :\n            html`\n            <div class=\"packaged-tracker\"> <!-- This will eventually be in an \"if packaged previously\" -->\n            <p>Packaged Previously</p>\n            </div>`\n          }\n          <div class=\"title-block\">\n            <img class=\"platform-icon\" src=\"${platform.icon}\" alt=\"platform icon\" />\n            <h3>${platform.title}</h3>\n            <!-- TODO need to fix the platform action blocks text spacing for the left. -->\n            <div class=\"platform-actions-block\">\n              ${platform.renderDownloadButton()}\n            </div>\n            <ul class=\"factoids\">\n              ${platform.factoids.map((fact: string) => html`<li>${fact}</li>`)}\n            </ul>\n          </div>\n        </div>`\n    );\n  }\n\n  async hideDialog(e: any){\n    let dialog: any = this.shadowRoot!.querySelector(\".dialog\");\n    if(e.target === dialog){\n      this.blob = undefined;\n      this.generating = false;\n      await dialog!.hide();\n      recordPWABuilderProcessStep(\"test_publish_pane_closed\", AnalyticsBehavior.ProcessCheckpoint);\n      document.body.style.height = \"unset\";\n    }\n  }\n\n  render() {\n    return html`\n      <sl-dialog class=\"dialog\" @sl-show=${() => document.body.style.height = \"100vh\"} @sl-hide=${(e: any) => this.hideDialog(e)} noHeader>\n        <div id=\"pp-frame-wrapper\">\n          <div id=\"pp-frame-content\">\n            <div id=\"pp-frame-header\">\n              <h1>Download Test Package</h1>\n              <p>If you want to see what your app would look like in its current state, use the test package buttons below!</p>\n            </div>\n            <div id=\"store-cards\">\n              ${this.renderContentCards()}\n            </div>\n            \n            <div id=\"feedback\">${this.feedbackMessages.length > 0 ?  this.feedbackMessages.map((error: TemplateResult) => error) : html``}</div>\n          </div>\n        </div>\n      </sl-dialog>\n    `;\n  }\n}\n\ninterface ICardData {\n  title: 'Windows' | 'Android' | 'iOS' | \"Meta Quest\";\n  factoids: string[];\n  isActionCard: boolean;\n  icon: string;\n  renderDownloadButton: () => TemplateResult;\n}"],"names":["DISALLOWED_ANDROID_PACKAGE_CHARS_REGEX","maxSigningKeySizeInBytes","generatePackageId","host","parts","p","withoutLeadingDigits","validateAndroidPackageId","packageId","packageErrors","validateAndroidOptions","options","validationErrors","hostWithProtocol","validateUrl","requiredSigningFields","prop","url","base","urlError","input","generateAndroidPackage","androidOptions","generateAppUrl","env","response","responseText","hasSafeImages","isConnectionRefusedOrForbidden","updatedOptions","updateAndroidOptionsWithSafeUrls","err","emptyAndroidPackageOptions","createAndroidPackageOptionsFromManifest","manifestContext","maniUrl","pwaUrl","manifest","appName","packageName","display","manifestIcons","icon","findBestAppIcon","maskableIcon","findSuitableIcon","monochromeIcon","navColorOrFallback","manifestUrlOrRoot","getAbsoluteUrl","getStartUrlRelativeToHost","relativeUrl","manifestUrl","startUrl","absoluteStartUrl","absoluteUrlProps","safeUrl","generateBundleId","validateIOSOptions","errors","generateIOSPackage","createPackageUrl","createPackageResponse","createIOSPackageOptionsFromManifest","i","tryGetHost","_a","emptyIOSPackageOptions","hostError","SigningMode","SigningMode2","validateOculusOptions","e","generateOculusPackage","createOculusPackageOptionsFromManifest","emptyOculusPackageOptions","emptyOculusSigningKey","DISALLOWED_WINDOWS_PACKAGE_CHARS_REGEX","generateWindowsPackageId","validateWindowsOptions","versionTrimmed","classicVersionTrimmed","validateWindowsAnaheimPackageVersions","version","classicVersion","versionErrors","versionArray","classicVersionArray","isValidVersion","versionInfos","versionInfo","validateVersion","segments","s","segmentValues","generateWindowsPackage","windowsOptions","a","emptyWindowsPackageOptions","createWindowsPackageOptionsFromManifest","maniURL","getManifestUrl","pwaURL","getURL","name","packageID","generatePackage","type","packageOptions","tryGenerateWindowsPackage","tryGenerateAndroidPackage","tryGenerateIOSPackage","tryGenerateOculusPackage","result","blob","HoverTooltip","LitElement","css","smallBreakPoint","scrollOffset","boundingRect","parentOffsetLeft","parentOffsetTop","tooltipX","tooltipY","element","top","left","parent","el","parentPositionStyle","checkIfShouldBeHidden","tooltipClass","html","__decorateClass","property","state","customElement","InfoCircleTooltip","ifDefined","AppPackageFormBase","formInput","inputType","inputClass","inputElement","errorMessage","isInvalid","parentAccordion","accordionFlipper","WindowsForm","getManifestContext","fetchOrCreateManifest","settingsToggleValue","val","checked","_b","index","_c","_d","checkboxes","checkedCheckboxes","desktopCheckbox","recordPWABuilderProcessStep","AnalyticsBehavior","AndroidForm","localStyles","_changedProperties","mode","event","filePicker","keyFile","fileReader","progressEvent","localeStrings","_","tooltip","IOSForm","target","OculusForm","PublishPane","xxxLargeBreakPoint","largeBreakPoint","mediumBreakPoint","old","platform","recordProcessStep","packageData","stack_trace","title","message","quick_desc","errString","error","text","filename","fact","dialog","platForm","form","packagingOptions","TestPublishPane"],"mappings":"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AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;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"}